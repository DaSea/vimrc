" ==============================================
" 主要放一些暂时不想用的插件， 未来某天可能会用
" ==============================================

if getfontname('DejaVuSansMonoForPowerline NF') != ''
    set guifont=DejaVuSansMonoForPowerline\ NF:h11:cANSI
elseif getfontname( 'DroidSansMonoForPowerline NF' ) != ''
    set guifont=DroidSansMonoForPowerline\ NF:h11:cANSI
elseif getfontname( 'InconsolataForPowerline NF' ) != ''
    set guifont=InconsolataForPowerline\ NF:h11:cANSI
endif

Plug 'itchyny/lightline.vim'"{{{
" ---------------------------------------------------
let g:lightline ={
            \ 'enable' :{
            \ 'statusline': 1,
            \ 'tabline': 0
            \ },
            \ 'colorscheme': 'PaperColor_light',
            \ 'component':{
            \ 'readonly': '%{&readonly?"":""}',
            \   'lineinfo': '%3l:%-2v',
            \ },
            \ 'active': {
            \ 'left': [ ['mode', 'paste'], ['fugitive'], ['filename', 'modified' ] ],
            \ 'right': [ [ 'lineinfo' ], [ 'fileformat', 'fileencoding', 'filetype' ] ]
            \ },
            \ 'inactive': {
            \ 'left': [['filename']],
            \ 'right': [['lineinfo']]
            \},
            \ 'component_function': {
            \   'modified': 'LightLineModified',
            \   'fugitive': 'LightLineFugitive',
            \   'filename': 'LightLineFilename',
            \   'mode': 'LightLineMode',
            \   'filetype': 'LightLineFiletype',
            \   'fileencoding': 'LightLineFileencoding',
            \   'fileformat': 'LightLineFileformat'
            \ },
            \ 'separator': {'left': '▶', 'right': '◀'},
            \ 'subseparator': {'left': '', 'right': ''}
            \ }

if g:islinux
    let g:lightline.separator = { 'left': '', 'right': '' }
    let g:lightline.subseparator = { 'left': '|', 'right': '|' }
endif

function! LightLineFugitive()
    if winwidth(0) > 70
        if exists('*fugitive#head')
            let githead = fugitive#head()
            return strlen(githead) ? ''.'['.githead.']': ''
        endif
    endif
    return ''
endfunction

function! LightLineFilename()
    let fname = expand('%:t')
    return '' != fname ? fname : '[No Name]'
    " return &ft == 'vimfiler' ? vimfiler#get_status_string() :
    " \ &ft == 'unite' ? unite#get_status_string() :
    " \ &ft == 'vimshell' ? vimshell#get_status_string() :
    " \ ('' != fname ? fname : '[No Name]')
endfunction

function! LightLineMode()
    return  winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineModified()
    if winwidth(0) > 70
        if &filetype == "help"
            return ""
        elseif &modified
            return "*"
        elseif &modifiable
            return "+"
        else
            return "?"
        endif
    else
        return ''
    endif
endfunction

function! LightLineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction
function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'Unkown') : ''
endfunction
function! LightLineFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction
"}}}

if g:setting.dev_icon_enable ==? 'yes'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeHighlightFolders = 1
let g:NERDTreeHighlightFoldersFullName = 1
endif

if g:setting.dev_icon_enable ==? 'yes'
    Plug 'ryanoasis/vim-devicons' "图片支持, 没多大卵用, {{{
    " loading the plugin
    let g:webdevicons_enable = 1
    " adding the flags to NERDTree
    let g:webdevicons_enable_nerdtree = 1
    " adding the custom source to unite
    if g:setting.ctrlp_or_unite ==? 'ctrlp'
        let g:webdevicons_enable_ctrlp = 1
        let g:webdevicons_enable_unite = 0
    else
        let g:webdevicons_enable_unite = 1
        let g:webdevicons_enable_ctrlp = 0
    endif
    " adding the column to vimfiler
    let g:webdevicons_enable_vimfiler = 0
    " adding to vim-airline's tabline
    let g:webdevicons_enable_airline_tabline = 0
    " adding to vim-airline's statusline
    let g:webdevicons_enable_airline_statusline = 1
    " adding to flagship's statusline
    let g:webdevicons_enable_flagship_statusline = 0
    " turn on/off file node glyph decorations (not particularly useful)
    let g:WebDevIconsUnicodeDecorateFileNodes = 0

    " use double-width(1) or single-width(0) glyphs
    " only manipulates padding, has no effect on terminal or set(guifont) font
    let g:WebDevIconsUnicodeGlyphDoubleWidth = 0
    " whether or not to show the nerdtree brackets around flags
    let g:webdevicons_conceal_nerdtree_brackets = 0
    " the amount of space to use after the glyph character (default ' ')
    let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '
    " Force extra padding in NERDTree so that the filetype icons line up vertically
    let g:WebDevIconsNerdTreeGitPluginForceVAlign = 0
    " }}}
endif

Plug 'mhinz/vim-startify',{'on': 'Startify'} " 开始界面,可以显示MRU, Session等{{{
"开始欢迎界面
nnoremap <F4> :Startify<CR>
" set session path
let g:startify_session_dir = 'D:/Develop/exVim/vimfiles/session'
let g:startify_list_order = [
            \ ['   MRU:'],
            \ 'files',
            \ ['   MRU(Dir):'],
            \ 'dir',
            \ ['   Sessions:'],
            \ 'sessions',
            \ ['   Bookmarks:'],
            \ 'bookmarks',
            \ ]
let g:startify_custom_header = [
            \ '   -----------------------------------------------------------',
            \ "   |     Vim是个慈善软件,如需了解,请阅读':help uganda'       |",
            \ '   |                                                         |',
            \ '   |                 o  ^--^                                 |',
            \ '   |                  o (oo)\=======                         |',
            \ '   |                    (__)\       )\/\                     |',
            \ '   |                        ||----w |                        |',
            \ '   |                        ||     ||                        |',
            \ '   |                                                         |',
            \ '   |                                                         |',
            \ '   -----------------------------------------------------------',
            \ ]
let g:startify_custom_footer = ['', "   可以做到,相信自己! ", '']
"}}}

" 因为unit.vim和ctrlp有许多相同的功能, 所以分开, 可以让大家自由选择
" 这个主要是unite.vim 和 denite.nvim的相关插件
" 由于Denite.nvim是python支持, 所以速度比unite.vim快好多, 最终是取代unite.vim{{{
if g:isNvim
    Plug 'Shougo/denite.nvim', {'do': ':UpdateRemotePlugins'}
else
    Plug 'Shougo/denite.nvim'
endif " {{{
nnoremap <silent> <C-p>
            \ :<C-u>Denite -auto-resize -mode=insert file_rec<CR>
nnoremap <silent> <leader>lf
            \ :<C-u>Denite -auto-resize -mode=insert file_rec<CR>
nnoremap <silent> <leader>fl
            \ :<C-u>Denite -auto-resize -cursor-wrap -mode=insert buffer<CR>
nnoremap <silent> <leader>ft
            \ :<C-u>Denite -mode=insert line<CR>
nnoremap <silent> <leader>fm
            \ :<C-u>Denite -auto-resize -mode=insert outline<CR>
nnoremap <silent> <leader>am
            \ :<C-u>Denite -auto-resize -mode=normal menu<CR>
nnoremap <silent> <leader>gw
            \ :<C-u>Denite grep:::`expand('cword')`
" menu设置, 加载menu文件{{{
let g:denite_menus = {}
if exists('g:exvim_custom_path')
    let s:denite_menu_file = g:exvim_custom_path . '/denite_menu.vim'
    if filereadable(expand(s:denite_menu_file))
        exec 'source ' . fnameescape(s:denite_menu_file)
    endif
endif
"}}}

function! DeniteInit() abort "{{{
    " menu 设置
    call denite#custom#var('menu', 'menus', g:denite_menus)

    " Change mappings.
    call denite#custom#map('_', '<Esc>', '<denite:enter_mode:normal>', 'noremap')
    call denite#custom#map('insert', '<C-i>', '<denite:input_command_line>', 'noremap')
    call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
    call denite#custom#map('insert', '<Esc>', '<denite:enter_mode:normal>', 'noremap')

    " Change matchers.
    call denite#custom#source('file_mru', 'matchers',
                \ ['matcher_fuzzy'])
    call denite#custom#source('file_rec', 'matchers',
                \ ['matcher_fuzzy'])
    call denite#custom#source('file_mru', 'converters',
                \ ["converter_relative_word"])

    " Ripgrep command on grep source
    " Change file_rec command.
    let s:denite_exe_command = 'rg'
    if !executable(s:denite_exe_command)
        let s:denite_exe_command = 'ag'
    endif
    if s:denite_exe_command ==? 'rg'
        " https://github.com/BurntSushi/ripgrep
        call denite#custom#var('file_rec', 'command',
                    \ ['rg', '--files',
                    \ '--glob', '!.git', '',
                    \ '--glob', '!.exvim', '',
                    \ '--glob', '!.svn', '',
                    \ '--glob', '!obj', '',
                    \ '--glob', '!bin', '',
                    \ '--glob', '!assets', '',
                    \ '--glob', '!libs', '',
                    \ '--glob', '!res', '',
                    \ '--glob', '!build', ''
                    \ ])
        call denite#custom#var('grep', 'command', ['rg'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'final_opts', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts',
                    \ ['--vimgrep', '--no-heading'])
    elseif s:denite_exe_command ==? 'ag'
        " https://github.com/ggreer/the_silver_searcher
        call denite#custom#var('file_rec', 'command',
                    \ ['ag', '--follow', '--nocolor', '--nogroup',
                    \ '--ignore-dir', 'obj', '',
                    \ '--ignore-dir', 'bin', '',
                    \ '--ignore-dir', 'assets', '',
                    \ '--ignore-dir', 'libs', '',
                    \ '--ignore-dir', 'res', '',
                    \ '-g', '.'])
        call denite#custom#var('grep', 'command', ['ag'])
        call denite#custom#var('grep', 'default_opts',
                    \ ['-w', '--vimgrep', '--noheading'])
    endif

    " Define alias
    " call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
                \ ['git', 'ls-files', '-co', '--exclude-standard'])

    " Change options
    call denite#custom#option('default', 'highlight_mode_insert', 'CursorLine')
    call denite#custom#option('default', 'highlight_mode_normal', 'CursorLine')

    " Change default prompt
    call denite#custom#option('default', 'prompt', '>>')
    " call denite#custom#option('default', 'prompt', '▷')
    call denite#custom#option('default', 'short_source_names', v:true)

    " Change ignore_globs
    call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
                \ [ '.exvim/', '.git/', '.ropeproject/', '__pycache__/',
                \   'env/', 'images/', '*.min.*', 'img/', 'fonts/',
                \   'build/', 'Debug/', 'Release/' , 'bin/', 'obj/'])
endfunction " }}}
call add(g:init_func_list, function('DeniteInit'))

if g:setting.status_line ==? 'airline'
    call add(g:airline_extensions, 'denite')
endif
" }}}

Plug 'Shougo/neomru.vim' " {{{
nnoremap <silent> <leader>jf :<C-u>Denite -mode=insert file_mru<CR>
" }}}

Plug 'Shougo/unite.vim' "  {{{
" 基本设置
let g:unite_force_overwrite_statusline = 0
" 设置匹配模式
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
let g:unite_source_file_mru_time_format = "%m/%d %T "
let g:unite_source_directory_mru_limit = 100
let g:unite_source_directory_mru_time_format = "%m/%d %T "
let g:unite_source_file_rec_max_depth = 10
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
"let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable=1
let g:unite_prompt='▷'
let g:unite_winheight=25
let g:unite_source_grep_default_opts = '-iRHn'
            \ . " --exclude='tags'"
            \ . " --exclude='cscope*'"
            \ . " --exclude='*.svn*'"
            \ . " --exclude='*.log*'"
            \ . " --exclude='*tmp*'"
            \ . " --exclude-dir='**/tmp'"
            \ . " --exclude-dir='CVS'"
            \ . " --exclude-dir='.svn'"
            \ . " --exclude-dir='.git'"
            \ . " --exclude-dir='.exvim'"
            \ . " --exclude-dir='node_modules'"
" Using ag or pt as recursive command.
if executable('ag')
    " https://github.com/ggreer/the_silver_searcher
    let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
                \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
                \  '''.exvim'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
    let g:unite_source_grep_recursive_opt = ''
    " let g:unite_source_grep_encoding = 'utf-8'
elseif executable('pt')
    " https://github.com/monochromegane/the_platinum_searcher
    let g:unite_source_rec_async_command = ['pt', '--follow', '--nogroup', '--nocolor', '-S', '-g']
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor'
    let g:unite_source_grep_recursive_opt = ''
    " let g:unite_source_grep_encoding = 'utf-8'
endif

if g:setting.status_line ==? 'airline'
    call add(g:airline_extensions, 'unite')
endif

" 文件查找
" nnoremap <silent> <C-p> :<C-u>Unite -no-split -buffer-name=files -start-insert -update-time=100 file_rec<CR>
" nnoremap <silent> <leader>ft :<C-u>Unite -no-split -buffer-name=files -start-insert file_rec/async:!<CR>
" nnoremap <silent> <leader>fs :Unite -no-split -buffer-name=files -start-insert file_rec/async<cr>
" 打开的buffer查找
nnoremap <silent> <leader>fk :<C-u>Unite -quick-match -buffer-name=buffer buffer<CR>
" 文件内搜索
" nnoremap <silent> <leader>gw :<C-u>Unite grep:%:expand("<cword>")<CR>
" nnoremap <silent> <leader>gw :<C-u>UniteWithCursorWord grep<CR>
"" grep dictionay
""" For searching the word in the cursor in the current directory
nnoremap <silent> <leader>gv :Unite grep:.::<C-R><C-w><CR>
nnoremap <silent> <leader>ge :Unite grep:.<cr>
"For searching the word handin
" nnoremap <silent> <leader>vs :Unite grep:.<CR>
"For searching the word in the cursor in the current buffer
" noremap <silent> <leader>vf :Unite grep:%::<C-r><C-w><CR>
"For searching the word in the cursor in all opened buffer
" noremap <silent> <leader>va :Unite grep:$buffers::<C-r><C-w><CR>
"}}}

" }}}
Plug 'tacroe/unite-mark' " {{{
nnoremap <leader>vm :Unite mark<CR>
" }}}

Plug 'Shougo/unite-outline' " 函数跳转等变量跳转{{{
nnoremap <leader>fn :Unite -start-insert -buffer-name=outline outline<CR>
" }}}

Plug 'Shougo/vimfiler.vim' "文件浏览器 {{{
" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = '¦'
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_readonly_file_icon = ''
let g:vimfiler_marked_file_icon = '√'
let g:vimfiler_expand_jump_to_first_child = 0
let g:vimfiler_ignore_pattern = []

let g:vimfiler_as_default_explorer = 1
let g:vimfiler_force_overwrite_statusline = 0
let g:vimfiler_min_cache_files = 500
" 需要一个在任意时候可以打开文件所在目录列表的定义
nnoremap <silent> <leader>fb :VimFilerBufferDir -buffer-name=explorer
            \ -split -direction=aboveleft -simple -winwidth=34 -toggle<CR>
" 文件浏览器
nnoremap <F2> :VimFilerExplorer -winwidth=35<CR>
autocmd FileType vimfiler nmap <silent><buffer><expr> <CR> vimfiler#smart_cursor_map(
            \ "\<Plug>(vimfiler_expand_tree)",
            \ "\<Plug>(vimfiler_edit_file)")
" }}}

function! UnitInit() abort " unite 系列加载完成后的初始化{{{
    " direction
    call unite#custom#profile('default', 'context', {
                \   'direction': 'botright',
                \ })
    call vimfiler#custom#profile('default', 'context', {
                \ 'explorer' : 1,
                \ 'safe': 0,
                \ 'autocd': 1,
                \ })
    " Set up some custom ignores
    call unite#custom#source('file_rec,file_rec/async,file_mru,file',
                \ 'ignore_pattern',join([
                \ '\.git/',
                \ '\.svn/',
                \ '\.gitignore/',
                \ '\.bundle/',
                \ '\.neobundle/',
                \ '\.exvim/',
                \ '\.metadata/',
                \ '\release/',
                \ '\debug/',
                \ ], '\|'))
    call neomru#set_default(
                \ 'g:neomru#file_mru_ignore_pattern',
                \'\~$\|\.\%(o\|exe\|dll\|bak\|zwc\|pyc\|sw[po]\)$'.
                \'\|\%(^\|/\)\.\%(exvim\|hg\|git\|bzr\|svn\)\%($\|/\)'.
                \'\|^\%(\\\\\|/media/\|/temp/\|/tmp/\|\%(/private\)\=/var/folders/\)'.
                \'\|\%(^\%(fugitive\)://\)'.
                \'\|\%(^\%(term\)://\)'
                \ )
    call neomru#set_default(
                \ 'g:neomru#directory_mru_ignore_pattern',
                \'\%(^\|/\)\.\%(exvim\|hg\|git\|bzr\|svn\)\%($\|/\)'.
                \'\|^\%(\\\\\|/obj/\|/media/\|/temp/\|/tmp/\|\%(/private\)\=/var/folders/\)',
                \ )
    " call unite#custom#source('file_rec/async,file_rec/git', 'ignore_globs', [])
endfunction "}}}
call add(g:init_func_list, function('UnitInit'))

" vim:ts=4:sw=4:sts=4 et fdm=marker:

