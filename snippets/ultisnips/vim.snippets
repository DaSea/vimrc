priority -50

###########################################################################
#                            SnipMate Snippets                            #
###########################################################################
snippet gvar "Global / configuration variable" b
if !exists("g:${1:MyUltraImportantVar}")
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "script reload guard" b
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
	finish
endif
let $1 = 1$3
endsnippet

snippet f "function" b
function ${1:function_name}($2) " {{{
	${3:" code}
endfunction " }}}
endsnippet

snippet if  "if :" b
if ${1:condition}
	$2
endif
endsnippet

snippet elseif "elseif " b
elseif ${1:condition}
	$2
endsnippet

snippet ifelse "if .. else ..." b
if ${1:condition}
	$2
else
	$3
endif
endsnippet

snippet for "for ..." b
for ${1:var} in ${2:list}
	$3
endfor
endsnippet

snippet while "while ..." b
while ${1:condition}
	$2
endwhile
endsnippet

snippet try "try ... catch ..." b
try
	${1:TARGET}
catch /${2:pattern}/
	$3
endtry
endsnippet

snippet tryfinally "try ... finally ... endtry" b
try
	${1:TARGET}
finally
	$2
endtry
endsnippet

snippet echomsg "log" b
echomsg string(${1:TARGET})
endsnippet

snippet command "command call function" b
command! ${1:command_name} call ${2:func_name}
endsnippet

snippet customlist "customlist complete function" b
function! ${1:func_name}(arglead, cmdline, cursorpos) abort
	return filter(${2:list}, 'stridx(v:val, a:arglead) == 0')
endfunction
endsnippet

snippet augroup "augroup with autocmds" b
augroup ${1:augroup_name}
	autocmd!
	autocmd ${2:event}
augroup END
endsnippet

snippet redir "redir => var" b
redir => ${1:var}
${2:TARGET}
redir END
endsnippet


snippet g:loaded "if exists('g:loaded_{plugin-name}')" b
if exists('g:loaded_${1}')
	finish
endif

${0}

let g:loaded_$1 = 1
endsnippet

snippet modeline " vim: {modeline}" b
" vim: ${0:foldmethod=marker}
endsnippet

snippet python
alias   py "python <<EOF | EOF" b
python << EOF
$1
EOF
endsnippet

snippet python3 "python3 <<EOF | EOF" b
python3 << EOF
$1
EOF
endsnippet

snippet lua "lua abbr" b
lua << EOF
$1
EOF
endsnippet

snippet version "vim-version-check" b
v:version > ${1} || (v:version == $1 && has('patch${2}'))
endsnippet

snippet version_new "vim-version-check-new" b
has('patch-${1}')
endsnippet

# vim:ft=snippets:

