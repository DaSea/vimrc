if 'yes' ==? g:setting.cpp_enable " {{{
    Plug 'zchee/deoplete-clang'
    let g:deoplete#sources#clang#libclang_path='/usr/lib/llvm-3.8/lib/libclang.so.1'
    let g:deoplete#sources#clang#clang_header='/usr/include/clang/3.8.0'
endif "}}}

Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'} " {{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case=1
let g:deoplete#max_list=20
let g:deoplete#sources = {}
let g:deoplete#sources._ = ['buffer']
let g:deoplete#sources.cpp = ['buffer', 'tag']
" omni function
" omni input
let g:deoplete#omni#input_patterns={}
let g:deoplete#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:deoplete#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:deoplete#omni#input_patterns.java = '[^. *\t]\.\w*'
let g:deoplete#omni#input_patterns.php =  '\h\w*\|[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
" keymap
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ deoplete#mappings#manual_complete()
inoremap <expr><C-h>
            \ deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>
            \ deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-g>    deoplete#undo_completion()
inoremap <expr><C-l>    deoplete#refresh()
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
    return deoplete#close_popup() . "\<CR>"
endfunction
function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" Initial {{{
function! DeopleteInit() abort
    " Use head matcher instead of fuzzy matcher
    call deoplete#custom#set('_', 'matchers', ['matcher_head'])
endfunction " }}}
call add(g:init_func_list, function('DeopleteInit'))
"}}}

Plug 'sickill/vim-monokai'
