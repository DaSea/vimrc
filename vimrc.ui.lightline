" tabline用那个
" 1时， 使用vim-buffline;
" 2时，使用lightline-buffer
let lightline_tabline=2
Plug 'itchyny/lightline.vim'
" lightline 状态栏{{{
" ---------------------------------------------------
set noshowmode
set showtabline=2
" set shortmess+=c
let g:lightline = {}

" lightline.vim配置{{{
function! LightLineFugitive()
    if winwidth(0) > 70
        if exists('*fugitive#head')
            let githead = fugitive#head()
            return strlen(githead) ? ''.'['.githead.']': ''
        endif
    endif
    return ''
endfunction

function! LightLineFilename()
    let fname=""
    if winwidth(0) > 84
        let fname = expand('%:p:.')
    elseif winwidth(0) > 56
        " 取后面a/b/name.cpp
        let fname = expand("%:t")
    else
        let fname = expand('%:t')
    endif
    return '' != fname ? fname : '[No Name]'
    " return &ft == 'vimfiler' ? vimfiler#get_status_string() :
    " \ &ft == 'unite' ? unite#get_status_string() :
    " \ &ft == 'vimshell' ? vimshell#get_status_string() :
    " \ ('' != fname ? fname : '[No Name]')
endfunction

function! LightLineMode()
    " return  winwidth(0) > 60 ? lightline#mode() : ''
    return  lightline#mode()
endfunction

function! LightLineModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "*"
    elseif &modifiable
        return "+"
    else
        return "?"
    endif
endfunction

function! LightLineFileformat()
    if exists("*WebDevIconsGetFileFormatSymbol")
        return winwidth(0) > 56 ? WebDevIconsGetFileFormatSymbol() : ''
    else
        return winwidth(0) > 56 ? &fileformat : ''
    endif
endfunction

function! LightLineFiletype()
    if exists("*WebDevIconsGetFileTypeSymbol")
        return winwidth(0) > 50 ? (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol() : 'Unknown') : ''
    else
        return winwidth(0) > 50 ? (strlen(&filetype) ? &filetype : 'Unkown') : ''
    endif
endfunction

function! LightLineFileencoding()
    return winwidth(0) > 50 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction
" }}}

" vim-buffline配置 {{{
if lightline_tabline == 1
    Plug 'bling/vim-bufferline'
    let g:lightline = {
                \ 'colorscheme': 'one',
                \ 'tabline': {
                \   'left': [ ['bufferline'] ]
                \ },
                \ 'component_expand': {
                \   'bufferline': 'LightlineBufferline',
                \ },
                \ 'component_type': {
                \   'bufferline': 'tabsel',
                \ },
                \ 'component':{
                \ 'readonly': '%{&readonly?"":""}',
                \ 'lineinfo': '%l%v',
                \ },
                \ 'active': {
                \ 'left': [ ['mode'], ['filename', 'modified' ] ],
                \ 'right': [ [ 'lineinfo' ], [ 'fileformat', 'fileencoding', 'filetype' ] ]
                \ },
                \ 'inactive': {
                \ 'left': [['filename']],
                \ 'right': [['lineinfo']]
                \},
                \ 'component_function': {
                \   'modified': 'LightLineModified',
                \   'fugitive': 'LightLineFugitive',
                \   'filename': 'LightLineFilename',
                \   'mode': 'LightLineMode',
                \   'filetype': 'LightLineFiletype',
                \   'fileencoding': 'LightLineFileencoding',
                \   'fileformat': 'LightLineFileformat'
                \ },
                \ 'separator': {'left': g:setting.left_separator, 'right': g:setting.right_separator},
                \ 'subseparator': {'left': g:setting.left_sub_separator, 'right': g:setting.right_sub_separator}
                \ }
    function! LightlineBufferline()
        call bufferline#refresh_status()
        return [g:bufferline_status_info.before, g:bufferline_status_info.current, g:bufferline_status_info.after]
    endfunction

    let g:bufferline_echo = 0
    let g:bufferline_active_buffer_right=''
    let g:bufferline_active_buffer_left=''
    let g:bufferline_fname_mod = ':t'
    let g:bufferline_solo_highlight = 1
    let g:bufferline_excludes = [
                \ 'nerdtree', 'unite', 'vimfiler'
                \ ]
endif
" }}}

" lightline-bufferline配置{{{
if lightline_tabline == 2
    Plug 'taohex/lightline-buffer'
    let g:lightline = {
                \ 'colorscheme': 'Dracula',
                \ 'tabline': {
                \   'left': [ [ 'bufferinfo' ], [ 'bufferbefore', 'buffercurrent', 'bufferafter' ] ], 
                \   'right': [ [ 'close' ], ]
                \ },
                \ 'component_expand': {
                \   'buffercurrent': 'lightline#buffer#buffercurrent2',
                \   'bufferafter': 'lightline#buffer#bufferafter',
                \   'bufferbefore': 'lightline#buffer#bufferbefore'
                \ },
                \ 'component_type': {
                \   'buffercurrent': 'tabsel',
                \   'bufferafter': 'raw',
                \   'bufferbefore': 'raw'
                \ },
                \ 'component':{
                \ 'readonly': '%{&readonly?"":""}',
                \ 'lineinfo': '%l%v',
                \ },
                \ 'active': {
                \ 'left': [ ['mode'], ['filename', 'modified' ] ],
                \ 'right': [ [ 'lineinfo' ], [ 'fileformat', 'fileencoding', 'filetype' ] ]
                \ },
                \ 'inactive': {
                \ 'left': [['filename']],
                \ 'right': [['lineinfo']]
                \},
                \ 'component_function': {
                \   'bufferinfo': 'LightLineBufferInfo',
                \   'modified': 'LightLineModified',
                \   'fugitive': 'LightLineFugitive',
                \   'filename': 'LightLineFilename',
                \   'mode': 'LightLineMode',
                \   'filetype': 'LightLineFiletype',
                \   'fileencoding': 'LightLineFileencoding',
                \   'fileformat': 'LightLineFileformat'
                \ },
                \ 'separator': {'left': g:setting.left_separator, 'right': g:setting.right_separator},
                \ 'subseparator': {'left': g:setting.left_sub_separator, 'right': g:setting.right_sub_separator}
                \ }
    let g:lightline_buffer_status_info = {}
    let g:lightline_buffer_logo = "\uf17c"
    " let g:lightline_buffer_logo = ' '
    let g:lightline_buffer_readonly_icon = ''
    let g:lightline_buffer_modified_icon = '✭'
    let g:lightline_buffer_git_icon = ' '
    let g:lightline_buffer_ellipsis_icon = '..'
    let g:lightline_buffer_expand_left_icon = '◀ '
    let g:lightline_buffer_expand_right_icon = ' ▶'
    let g:lightline_buffer_active_buffer_left_icon = ''
    let g:lightline_buffer_active_buffer_right_icon = ''
    " let g:lightline_buffer_separator_icon = '  '

    " lightline-buffer function settings
    let g:lightline_buffer_show_bufnr = 1
    let g:lightline_buffer_rotate = 0
    let g:lightline_buffer_fname_mod = ':t'
    let g:lightline_buffer_excludes = [
                \ 'nerdtree', 'unite', 'vimfiler'
                \ ]

    let g:lightline_buffer_maxflen = 30
    let g:lightline_buffer_maxfextlen = 3
    let g:lightline_buffer_minflen = 16
    let g:lightline_buffer_minfextlen = 3
    let g:lightline_buffer_reservelen = 20

    function! LightLineBufferInfo() abort "{{{
        if tabpagenr('$') > 1
            return g:lightline_buffer_logo . tabpagenr() .'/'.tagpagenr('$')
        endif
        return g:lightline_buffer_logo
    endfunction " }}}
endif

let g:lightline.mode_map = {
            \ 'n' : 'N',
            \ 'i' : 'I',
            \ 'R' : 'R',
            \ 'v' : 'V',
            \ 'V' : 'VL',
            \ "\<C-v>": 'VB',
            \ 'c' : 'CMD',
            \ 's' : 'SE',
            \ 'S' : 'SL',
            \ "\<C-s>": 'SB',
            \ 't': 'TERM',
            \ }
" }}}

" 由于lightline的tabline没有用,1 ,2等跳转buffer的功能,
" 所以只能简单加个快捷键自己输入buffer的nr跳转{{{
nnoremap <silent> ,b :call LightlineJumpBuffer()<CR>
function! LightlineJumpBuffer() abort " 跳转到buffer {{{
    call inputsave()
    let buffern = input("Please enter buffer number:")
    call inputrestore()
    if strlen(buffern)==0
        return
    endif

    execute "buffer " . buffern
endfunction " }}}
" }}}
"}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
