" 因为unit.vim和ctrlp有许多相同的功能, 所以分开, 可以让大家自由选择
" 这个主要是unite.vim的相关插件
" Denite.nvim 设置, 最终是取代unite.vim{{{
Plug 'Shougo/denite.nvim', {'do': ':UpdateRemotePlugins'} " {{{
nnoremap <silent> <leader>lf :<C-u>Denite -auto-resize -mode=insert file_rec<CR>
nnoremap <silent> <leader>fl :<C-u>Denite -auto-resize -cursor-wrap -mode=normal buffer<CR>
nnoremap <silent> <leader>ft :<C-u>Denite -mode=insert -input=`expand('<cword>')` line<CR>

" menu设置 {{{
let s:denite_menus = {}
let s:denite_menus.vim = {
            \ 'description' : 'vim configure files',
            \ }
if g:iswindows
    let s:denite_menus.vim.file_candidates = [
                \ ['vimrc', $VIM./'.vimrc'],
                \ ['commonPlug', $VIM.'/.vimrc.vimplug'],
                \ ['unit.vim and denite.nvim', $VIM.'/.vimrc.unitvim'],
                \ ['complete', $VIM.'/.vimrc.complete'],
                \ ['language', $VIM.'/.vimrc.language'],
                \ ['ctrlp', $VIM.'/.vimrc.ctrlp'],
                \ ['discard', $VIM.'/.vimrc.discard']
                \ ]
else
    let s:denite_menus.vim.file_candidates = [
                \ ['vimrc', '~/.vimrc'],
                \ ['commonPlug', '~/.vimrc.vimplug'],
                \ ['unit.vim and denite.nvim', '~/.vimrc.unitvim'],
                \ ['complete', '~/.vimrc.complete'],
                \ ['language', '~/.vimrc.language'],
                \ ['ctrlp', '~/.vimrc.ctrlp'],
                \ ['discard', '~/.vimrc.discard']
                \ ]
endif
nnoremap <silent> <leader>am :<C-u>Denite -auto-resize -mode=normal menu<CR>
"}}}

function! DeniteInit() abort "{{{
    " menu 设置
    call denite#custom#var('menu', 'menus', s:denite_menus)

    " Change mappings.
    call denite#custom#map('_', '<Esc>', '<denite:enter_mode:normal>', 'noremap')
    call denite#custom#map('insert', '<C-i>', '<denite:input_command_line>', 'noremap')
    call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<C-k>', '<denite:move_to_prev_line>', 'noremap')
    call denite#custom#map('insert', '<Esc>', '<denite:enter_mode:normal>', 'noremap')

    " Change matchers.
    call denite#custom#source(
                \ 'file_mru', 'matchers', ['matcher_fuzzy'])
    call denite#custom#source(
                \ 'file_rec', 'matchers', ['matcher_fuzzy'])
    " call denite#custom#source(
    " \ 'file_rec', 'matchers', ['matcher_cpsm'])

    " Ripgrep command on grep source
    " Change file_rec command.
    if executable('ag')
        call denite#custom#var('file_rec', 'command',
                    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
        call denite#custom#var('grep', 'command', ['ag'])
        call denite#custom#var('grep', 'default_opts',
                    \ ['-w', '--vimgrep', '--noheading'])
    elseif executable('rg')
        call denite#custom#var('file_rec', 'command',
                    \ ['rg', '--files', '--glob', '!.git'])
        call denite#custom#var('grep', 'command', ['rg'])
        call denite#custom#var('grep', 'default_opts',
                    \ ['--vimgrep', '--no-heading'])
    endif

    " Define alias
    " call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
                \ ['git', 'ls-files', '-co', '--exclude-standard'])

    " Change default prompt
    call denite#custom#option('default', 'prompt', '<> ')

    " Change ignore_globs
    call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
                \ [ '.exvim/', '.git/', '.ropeproject/', '__pycache__/',
                \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/',
                \   'build/'])
endfunction " }}}
call add(g:init_func_list, function('DeniteInit'))
" }}}

Plug 'Shougo/neomru.vim' " {{{
nnoremap <silent> <leader>jf :<C-u>Denite -mode=insert file_mru<CR>
" }}}

Plug 'DaSea/vim-denite-prjmgr'
if g:isNvim
    let g:projectmgr_vsc_root_dir = {
                \ "/mnt/e/Self/05_gitsrc": "git"}
else
    let g:projectmgr_vsc_root_dir = {
                \ "e:/Self/05_gitsrc": "git"}
endif
nnoremap <silent> <Leader>el :<C-u>Denite -mode=normal prjmgr<CR>
"}}}

Plug 'Shougo/unite.vim' "  {{{
" 基本设置
let g:unite_force_overwrite_statusline = 0
" 设置匹配模式
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
let g:unite_source_file_mru_time_format = "%m/%d %T "
let g:unite_source_directory_mru_limit = 100
let g:unite_source_directory_mru_time_format = "%m/%d %T "
let g:unite_source_file_rec_max_depth = 10
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
"let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable=1
let g:unite_prompt='▷'
let g:unite_winheight=25
let g:unite_source_grep_default_opts = '-iRHn'
            \ . " --exclude='tags'"
            \ . " --exclude='cscope*'"
            \ . " --exclude='*.svn*'"
            \ . " --exclude='*.log*'"
            \ . " --exclude='*tmp*'"
            \ . " --exclude-dir='**/tmp'"
            \ . " --exclude-dir='CVS'"
            \ . " --exclude-dir='.svn'"
            \ . " --exclude-dir='.git'"
            \ . " --exclude-dir='.exvim'"
            \ . " --exclude-dir='node_modules'"
" Using ag or pt as recursive command.
if executable('ag')
    " https://github.com/ggreer/the_silver_searcher
    let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
                \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
                \  '''.exvim'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
    let g:unite_source_grep_recursive_opt = ''
    " let g:unite_source_grep_encoding = 'utf-8'
elseif executable('pt')
    " https://github.com/monochromegane/the_platinum_searcher
    let g:unite_source_rec_async_command = ['pt', '--follow', '--nogroup', '--nocolor', '-S', '-g']
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor'
    let g:unite_source_grep_recursive_opt = ''
    " let g:unite_source_grep_encoding = 'utf-8'
endif
" 文件查找
nnoremap <silent> <C-p> :<C-u>Unite -no-split -buffer-name=files -start-insert -update-time=100 file_rec<CR>
" nnoremap <silent> <leader>ft :<C-u>Unite -no-split -buffer-name=files -start-insert file_rec/async:!<CR>
" nnoremap <silent> <leader>fs :Unite -no-split -buffer-name=files -start-insert file_rec/async<cr>
" 打开的buffer查找
nnoremap <silent> <leader>fk :<C-u>Unite -quick-match -buffer-name=buffer buffer<CR>
" 文件内搜索
" nnoremap <silent> <leader>gw :<C-u>Unite grep:%:expand("<cword>")<CR>
nnoremap <silent> <leader>gw :<C-u>UniteWithCursorWord grep<CR>
"" grep dictionay
""" For searching the word in the cursor in the current directory
nnoremap <silent> <leader>gv :Unite grep:.::<C-R><C-w><CR>
nnoremap <silent> <leader>ge :Unite grep:.<cr>
"For searching the word handin
" nnoremap <silent> <leader>vs :Unite grep:.<CR>
"For searching the word in the cursor in the current buffer
" noremap <silent> <leader>vf :Unite grep:%::<C-r><C-w><CR>
"For searching the word in the cursor in all opened buffer
" noremap <silent> <leader>va :Unite grep:$buffers::<C-r><C-w><CR>
"}}}

Plug 'tacroe/unite-mark' " {{{
nnoremap <leader>vm :Unite mark<CR>
" }}}

Plug 'Shougo/unite-outline' " 函数跳转等变量跳转{{{
nnoremap <leader>fm :Unite -start-insert -no-split -buffer-name=outline outline<CR>
" }}}

Plug 'Shougo/vimfiler.vim'  " 替换nertw(文件浏览器) {{{
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_force_overwrite_statusline = 0
let g:vimfiler_min_cache_files = 500
" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = '¦'
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_readonly_file_icon = ''
let g:vimfiler_marked_file_icon = '√'
let g:vimfiler_expand_jump_to_first_child = 0
let g:vimfiler_ignore_pattern = []

let g:vimfiler_as_default_explorer = 1
let g:vimfiler_force_overwrite_statusline = 0
let g:vimfiler_min_cache_files = 500
" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = '¦'
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_readonly_file_icon = ''
let g:vimfiler_marked_file_icon = '√'
let g:vimfiler_expand_jump_to_first_child = 0
let g:vimfiler_ignore_pattern = []
" 需要一个在任意时候可以打开文件所在目录列表的定义
nnoremap <silent> <leader>fb :VimFilerBufferDir -buffer-name=explorer
            \ -split -direction=aboveleft -simple -winwidth=34 -toggle<CR>
" 文件浏览器
nnoremap <F2> :VimFilerExplorer<CR>
autocmd FileType vimfiler nmap <silent><buffer><expr> <CR> vimfiler#smart_cursor_map(
            \ "\<Plug>(vimfiler_expand_tree)",
            \ "\<Plug>(vimfiler_edit_file)")
" }}}

function! UnitInit() abort " unite 系列加载完成后的初始化{{{
    " direction
    call unite#custom#profile('default', 'context', {
                \   'direction': 'botright',
                \ })
    call vimfiler#custom#profile('default', 'context', {
                \ 'explorer' : 1,
                \ 'safe': 0,
                \ 'autocd': 1,
                \ })
    " Set up some custom ignores
    call unite#custom#source('file_rec,file_rec/async,file_mru,file',
                \ 'ignore_pattern',join([
                \ '\.git/',
                \ '\.svn/',
                \ '\.gitignore/',
                \ '\.bundle/',
                \ '\.neobundle/',
                \ '\.exvim/',
                \ '\.metadata/',
                \ '\release/',
                \ '\debug/',
                \ ], '\|'))
    call neomru#set_default(
                \ 'g:neomru#file_mru_ignore_pattern',
                \'\~$\|\.\%(o\|exe\|dll\|bak\|zwc\|pyc\|sw[po]\)$'.
                \'\|\%(^\|/\)\.\%(exvim\|hg\|git\|bzr\|svn\)\%($\|/\)'.
                \'\|^\%(\\\\\|/media/\|/temp/\|/tmp/\|\%(/private\)\=/var/folders/\)'.
                \'\|\%(^\%(fugitive\)://\)'.
                \'\|\%(^\%(term\)://\)'
                \ )
    call neomru#set_default(
                \ 'g:neomru#directory_mru_ignore_pattern',
                \'\%(^\|/\)\.\%(exvim\|hg\|git\|bzr\|svn\)\%($\|/\)'.
                \'\|^\%(\\\\\|/obj/\|/media/\|/temp/\|/tmp/\|\%(/private\)\=/var/folders/\)',
                \ )
    " call unite#custom#source('file_rec/async,file_rec/git', 'ignore_globs', [])
endfunction "}}}
call add(g:init_func_list, function('UnitInit'))
"}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
