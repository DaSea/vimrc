" vim-plug插件管理器使用的配置文件 {{{
" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" 插件初始化函数list
let g:init_func_list = []
"}}}

"========================================================================================
" 使用到的插件的配置(The setting of the used plugin)
"========================================================================================
" ex系列插件, 工程管理 {{{

Plug 'DaSea/ex-config'
" Fork 'exvim/ex-config', change '.exvim.project_name' to '.exvim'
" ---------------------------------------------------
nnoremap <unique> <leader>ve :call exconfig#edit_cur_vimentry ()<CR>

Plug 'DaSea/ex-utility'
" ---------------------------------------------------
nnoremap <unique> <silent> <Leader>ad :EXbd<CR>
nnoremap <unique> <silent> <leader>an :EXbn<CR>
nnoremap <unique> <silent> <leader>ap :EXbp<CR>
nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
nnoremap <unique> <silent> <Leader><Tab> :EXsw<CR>
nmap <unique> <silent> <Leader><Esc> :EXgp<CR><ESC>
" 定义运行qml文件的脚本
" nnoremap <leader>mr :call system("qmlscene". expand("%"))<CR>

Plug 'exvim/ex-aftercolors'
" ---------------------------------------------------

Plug 'DaSea/ex-vimentry'
"Fork 'exvim/ex-vimentry', and change default template
" ---------------------------------------------------

Plug 'exvim/ex-project'
" ---------------------------------------------------
let g:ex_project_winpos='left'
let g:ex_project_winsize=28
let g:ex_project_winsize_zoom=40
nnoremap <unique> <silent> <F3> :EXProjectToggle<cr>
nnoremap <unique> <silent> <Leader>pf :call EXProjectFind<CR>

Plug 'exvim/ex-gsearch'
" ---------------------------------------------------
let g:ex_gsearch_ignore_case = 0
function! ExgsearchInit() abort "{{{
    call exgsearch#register_hotkey( 100, 0, '<leader>gs', ":EXGSearchToggle<CR>", 'Toggle global search window.' )
    call exgsearch#register_hotkey( 101, 0, '<leader>gg', ":EXGSearchCWord<CR>", 'Search current word.' )
    call exgsearch#register_hotkey( 102, 0, '<leader><S-f>', ":GS ", 'Shortcut for :GS' )
    call exgsearch#register_hotkey( 2, 1, 'q', ":EXGSearchClose<CR>" , 'Close window.')
endfunction "}}}
call add(g:init_func_list, function('ExgsearchInit'))

Plug 'exvim/ex-tags'
" ---------------------------------------------------
function! ExtagsInit() abort "{{{
    call extags#register_hotkey( 100, 0, '<leader>ts', ":EXTagsToggle<CR>", 'Toggle tag select window.' )
    call extags#register_hotkey( 101, 0, '<leader>]', ":EXTagsCWord<CR>", 'Tag select current word.' )
    " DISABLE: nnoremap <unique> <leader>] :exec 'ts ' . expand('<cword>')<CR>
endfunction "}}}
call add(g:init_func_list, function('ExtagsInit'))

Plug 'exvim/ex-symbol'
" ---------------------------------------------------
function! Exsymbol() abort "{{{
    call exsymbol#register_hotkey( 100, 0, '<leader>ss', ":EXSymbolList<CR>", 'List all symbols.' )
    call exsymbol#register_hotkey( 101, 0, '<leader>sq', ":EXSymbolOpen<CR>", 'Open symbols window.' )
    call exsymbol#register_hotkey( 102, 0, '<leader>sg', ":EXSymbolCWord<CR>", 'List symbols contains current word.' )

    if g:isGUI
        if g:ismac
            call exsymbol#register_hotkey( 102, 0, 'Ò', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
        else
            call exsymbol#register_hotkey( 102, 0, '<M-L>', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
        endif
    endif
endfunction "}}}
call add(g:init_func_list, function('Exsymbol'))
let g:ex_symbol_select_cmd = 'TS'

Plug 'exvim/ex-cscope'
" ---------------------------------------------------
function! Excscope() abort "{{{
    call excscope#register_hotkey( 100, 0, '<leader>cd', ":EXCSToggle<CR>", 'Toggle cscope window.' )
endfunction "}}}
call add(g:init_func_list, function('Excscope'))

Plug 'exvim/ex-qfix'
" ---------------------------------------------------
function! Exqfix() abort "{{{
    call exqfix#register_hotkey( 100, 0, '<leader>qf', ":EXQFixToggle<CR>", 'Toggle quickfix window.' )
    call exqfix#register_hotkey( 101, 0, '<leader>qq', ":EXQFixPaste<CR>", 'Open quickfix window and paste error list from register *.' )
endfunction "}}}
call add(g:init_func_list, function('Exqfix'))

" Plug 'exvim/ex-hierarchy'
" 生成继承关系图
" ---------------------------------------------------
" nnoremap <unique> <leader>hv :EXHierarchyCWord<CR>

Plug 'exvim/ex-showmarks'
" ex-showmarks: invoke by m... or <leader>mm, <leader>ma
" ---------------------------------------------------
" TODO: bootleq/ShowMarks on github is well organized in code, but have lots
" bugs, consider merge his code and fixes the bugs
let g:showmarks_enable = 1
let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:showmarks_ignore_type = 'hqm' " Ignore help, quickfix, non-modifiable buffers
" Hilight lower & upper marks
let g:showmarks_hlline_lower = 1
let g:showmarks_hlline_upper = 0


" Plug 'exvim/ex-visincr'
" ex-visincr: invoke when select text and type ':II'
" ---------------------------------------------------

Plug 'exvim/ex-matchit'
" ex-matchit: invoke by %
" ---------------------------------------------------

Plug 'exvim/ex-easyhl'
" ---------------------------------------------------
" 自动高亮当前光标下单词
" let g:ex_easyhl_auto_cursorhl = 1

Plug 'exvim/ex-searchcompl'
" invoke by /
" ---------------------------------------------------

Plug 'DaSea/ex-prjlist'
" ---------------------------------------------------
" let g:exprj_list_cache_directory = 'D:/Develop/cache'
" let g:exprj_list_win_pos = "botright"
" let g:exprj_list_win_szie = 30
" }}}

" 版本控制(git,svn)及修改状态显示{{{
" 使用git
if g:setting.version_status !=? 'no'
    Plug 'tpope/vim-fugitive' "{{{
    "}}}
endif

" =================================================================
" 显示与版本控制中的文件的差异
if g:setting.version_status ==? 'git'
    Plug 'airblade/vim-gitgutter' "{{{
    nmap ]h <Plug>GitGutterNextHunk
    nmap [h <Plug>GitGutterPrevHunk
    let g:gitgutter_realtime = 0
    let g:gitgutter_eager = 0
    "}}}
endif

if g:setting.version_status ==? 'git_svn'
    Plug 'mhinz/vim-signify' "{{{
    " let g:signify_disable_by_default = 1
    let g:signify_cursorhold_insert     = 0
    let g:signify_cursorhold_normal     = 1
    let g:signify_update_on_bufenter    = 0
    let g:signify_update_on_focusgained = 1
    let g:signify_vcs_list = [ 'git', 'svn' ]
    let g:signify_skip_filetype = {'vimfiler': 1, 'unite': 1, 'exproject': 1 }
    "}}}
endif
"}}}

" unit.vim 或者 ctrlp相关插件, 及文件管理器{{{
if g:setting.ctrlp_or_unite ==? 'ctrlp'
    if exists('g:exvim_custom_path')
        let g:vim_ctrlp_or_unite = g:exvim_custom_path.'/.vimrc.ctrlp'
    else
        let g:vim_ctrlp_or_unite = '~/.vimrc.ctrlp'
    endif
else
    if exists('g:exvim_custom_path')
        let g:vim_ctrlp_or_unite = g:exvim_custom_path.'/.vimrc.unitvim'
    else
        let g:vim_ctrlp_or_unite = '~/.vimrc.unitvim'
    endif
endif
if filereadable(expand(g:vim_ctrlp_or_unite))
    exec 'source ' . fnameescape(g:vim_ctrlp_or_unite)
endif
"}}}

Plug 'rhysd/clever-f.vim' " 行内搜索{{{
let g:clever_f_across_no_line = 1
let g:clever_f_smart_case = 1
" }}}

Plug 'majutsushi/tagbar',{'on': 'TagbarToggle'} " 主要为了在状态栏显示当前行所在函数{{{
nnoremap <Leader>tb :TagbarToggle<CR>
" }}}

"文件内容搜索和替换, undotree{{{
Plug 'dyng/ctrlsf.vim',{'on': 'CtrlSF'} "搜索工程下文件{{{
" Fork'dyng/ctrlsf.vim', and add g:ctrlsf_vcs_folder;
"---------------------------------------------------------------------
" 设置CtrlSF使用的搜索工具,默认使用ag,如果没有ag,则考虑使用ack
if executable('rg')
    let g:ctrlsf_ackprg = 'rg'
elseif executable('ag')
    let g:ctrlsf_ackprg = 'ag'
elseif executable('pt')
    let g:ctrlsf_ackprg = 'pt'
endif
" 是否在ctrlsf搜索结果打开其他窗口时,关闭搜索结果窗口
let g:ctrlsf_auto_close = 0
" 大小写敏感
let g:ctrlsf_case_sensitive = 'yes'
" 默认搜索路径, 设置为project则从本文件的工程目录搜索
let g:ctrlsf_default_root = 'project+cwd'
" 工程目录的顶级文件夹
" let g:ctrlsf_vcs_folder = ['.exvim', '.git', '.hg', '.svn', '.bzr', '_darcs']
" make result windows compact
let g:ctrlsf_indent = 2
" width or height
" 显示的上下文函数
let g:ctrlsf_context = '-B 0 -A 0'
" 高亮匹配行: o->打开的目标文件;p->预览文件
let g:ctrlsf_selected_line_hl = 'op'
nnoremap <F5> :CtrlSFToggle<CR>
nnoremap <leader>sw :call CtrlsfCurWord(expand("<cword>"))<CR>
function! CtrlsfCurWord(word) abort
    " 需要修改为根据exvim工程文件类型进行搜索
    let s:type = &filetype
    if "c" == s:type
        let s:type = "cc"
    endif
    let s:filetype = '-filetype '.s:type
    " -w whole word;
    execute "CtrlSF ".s:filetype.' -R \b'. a:word .'\b'
endfunction
"}}}

Plug 'terryma/vim-multiple-cursors' "多项选择{{{
"---------------------------------------------------------------------
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key = '<F6>'
let g:multi_cursor_next_key = '<C-j>'
let g:multi_cursor_prev_key = '<C-k>'
let g:multi_cursor_skip_key = '<C-x>'
let g:multi_cursor_quit_key = '<ESC>'
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction
"}}}

Plug 'mbbill/undotree',{'on': 'UndotreeToggle'} " undo 历史树,直观显示,快速选择恢复{{{
if has("persistent_undo")
    set undodir=~/.undodir
    set undofile
endif
"}}}
"}}}

"  快速注释, 及生成函数及文件注释{{{
Plug 'scrooloose/nerdcommenter' " 快速注释{{{
" Invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
" ---------------------------------------------------
" 我主要用于C/C++代码注释(其它的也行)
" 以下为插件默认快捷键，其中的说明是以C/C++为例的，其它语言类似
" <Leader>ci 以每行一个 /* */ 注释选中行(选中区域所在行)，再输入则取消注释
" <Leader>cm 以一个 /* */ 注释选中行(选中区域所在行)，再输入则称重复注释
" <Leader>cc 以每行一个 /* */ 注释选中行或区域，再输入则称重复注释
" <Leader>cu 取消选中区域(行)的注释，选中区域(行)内至少有一个 /* */
" <Leader>ca 在/*...*/与//这两种注释方式中切换（其它语言可能不一样了）
" <Leader>cA 行尾注释
" 注释的时候加个空格
let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
"}}}

Plug 'DaSea/DoxygenToolkit.vim' "生成文件注释和函数注释{{{
" ---------------------------------------------------
" let g:DoxygenToolkit_commentType = "C++"
let g:DoxygenToolkit_briefTag_pre="@brief  "
let g:DoxygenToolkit_paramTag_pre="@param  "
let g:DoxygenToolkit_returnTag="@return "
" let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------"
" let g:DoxygenToolkit_blockFooter="--------------------------------------------------------------------------"
let g:DoxygenToolkit_authorName=g:setting.author_name
let g:DoxygenToolkit_licenseTag="None"
let g:DoxygenToolkit_compactDoc="no"
" map
nnoremap <leader>di :DoxFunc<CR>
nnoremap <Leader>df :DoxFile<CR>
"}}}
"}}}

" 快速移动(行的移动， 行间移动， 窗口间移动)  {{{
Plug 'matze/vim-move'
" alt + j : 下移; alt+k: 上移;

Plug 't9md/vim-choosewin' " 快速在窗口在跳转 {{{
" let g:choosewin_statusline_replace=1
" let g:choosewin_overlay_enable=1
nmap - <Plug>(choosewin)
" }}}

Plug 'Lokaltog/vim-easymotion' " {{{
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline=0
" map <leader> <Plug>(easymotion-prefix)
map <leader><leader>/ <Plug>(easymotion-sn)
omap <Leader><Leader>/ <Plug>(easymotion-tn)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><Leader>l <Plug>(easymotion-lineforward)
map <Leader><Leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>. <Plug>(easymotion-repeat)
"}}}
"}}}

" 界面显示相关{{{
Plug 'ntpeters/vim-better-whitespace' "显示行尾多余空格并快速删除{{{
" 显示行尾空格(better)
" ----------------------------------------------------
let g:better_whitespace_filetypes_blacklist = ['denite', 'unite', 'vimfiler', 'ctrlp']
noremap CS :StripWhitespace<CR>
"}}}

if 'airline' ==? g:setting.status_line
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes' " airline状态栏{{{
    let g:airline_powerline_fonts = 1
    let g:airline_theme = g:setting.status_color
    " let g:airline_left_sep = ''
    " let g:airline_left_alt_sep = ''
    " let g:airline_right_sep = ''
    " let g:airline_right_alt_sep = ''
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.linenr = ''
    let g:airline_detect_modified=1
    let g:airline_detect_crypt=0
    let g:airline_detect_spell=0
    let g:airline_detect_iminsert=0
    let g:airline_inactive_collapse=0
    let g:airline_extensions = ['quickfix', 'tagbar']
    if g:setting.ctrlp_or_unite ==? 'ctrlp'
        call add(g:airline_extensions, 'ctrlp')
    else
        call add(g:airline_extensions, 'unite')
    endif
    if g:setting.show_tabline ==? 'yes'
        call add(g:airline_extensions, 'tabline')
        let g:airline#extensions#tabline#enabled=1
        let g:airline#extensions#tabline#show_splits = 1
        let g:airline#extensions#tabline#switch_buffers_and_tabs = 1
        let g:airline#extensions#tabline#show_buffers = 1
        let g:airline#extensions#tabline#show_tabs = 1
        let g:airline#extensions#tabline#buffers_label = 'B'
        let g:airline#extensions#tabline#tabs_label = 'T'
        let g:airline#extensions#tabline#buffer_idx_mode = 1
        nmap ,1 <Plug>AirlineSelectTab1
        nmap ,2 <Plug>AirlineSelectTab2
        nmap ,3 <Plug>AirlineSelectTab3
        nmap ,4 <Plug>AirlineSelectTab4
        nmap ,5 <Plug>AirlineSelectTab5
        nmap ,6 <Plug>AirlineSelectTab6
        nmap ,7 <Plug>AirlineSelectTab7
        nmap ,8 <Plug>AirlineSelectTab8
        nmap ,9 <Plug>AirlineSelectTab9
        nmap <leader>j <Plug>AirlineSelectPrevTab
        nmap <leader>k <Plug>AirlineSelectNextTab
        " let g:airline#extensions#tabline#formatter = 'unique_tail'
        let g:airline#extensions#tabline#buffer_nr_format = '%s: '
        let g:airline#extensions#tabline#fnamemod = ':t:.'
        let g:airline#extensions#tabline#fnametruncate = 0
        let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
    endif
    " 各个部分的设置简化
    if g:isGUI
        let g:airline_section_c = '%t'
    endif
    let g:airline_section_z = '%l%{g:airline_symbols.linenr}%L'
    let g:airline_mode_map = {
                \ '__' : '-',
                \ 'n'  : 'N',
                \ 'i'  : 'I',
                \ 'R'  : 'R',
                \ 'c'  : 'C',
                \ 'v'  : 'v',
                \ 'V'  : 'VL',
                \ '' : 'VB',
                \ 's'  : 's',
                \ 'S'  : 'S',
                \ '' : 'S',
                \ }
    " }}}
endif

Plug 'Konfekt/FastFold' "{{{
let g:cpp_folding=1
let g:php_folding=1
let g:lua_folding=1
let g:vimsyn_folding='af'
let g:c_folding=1
" }}}

Plug 'Yggdroot/indentLine' "对齐线{{{
" ---------------------------------------------------
let g:indentLine_color_gui = '#FF4040'
let g:indentLine_char = '┊'
let g:indentLine_faster = 1
"}}}

" colorscheme 插件 {{{
Plug 'altercation/vim-colors-solarized'
" ---------------------------------------------------
let g:solarized_menu = 0
let g:solaried_bold = 1
let g:solaried_underline = 1
let g:solaried_italic = 0
let g:solarized_termcolors=256

Plug 'joshdick/onedark.vim'
let g:onedark_termcolors=256

" 个人收集的一些主题
" Plug 'DaSea/vim-personcolors'
"}}}

" buffer窗口的大小的改变{{{
" 宽度与高度相等
nnoremap W= <C-W>=
" 宽度的变化
nnoremap WA :call WinWidthChange(10, 0)<CR>
nnoremap WS :call WinWidthChange(10, 1)<CR>
" 高度的变化
nnoremap HA :call WinHeightChange(10, 0)<CR>
nnoremap HS :call WinHeightChange(10, 1)<CR>

" 宽度改变->(increment: 要增加或减少的宽度, add_sub: 0, 增加, 1, 减少){{{
function! WinWidthChange(increment, add_sub) abort
    let cur_width = winwidth(0)
    if 0 == a:add_sub
        let cur_width = cur_width + a:increment
    else
        let cur_width = cur_width - a:increment
    endif
    " 如果小于最小宽度, 大于最大宽度, 就不会有什么变化了
    silent exe "normal " . cur_width ."\<C-W>|"
endfunction " }}}

" 高度改变->(increment: 要增加或减少的高度; add_sub: 0, 增加, 1, 减少) {{{
function! WinHeightChange(increment, add_sub) abort
    let cur_height = winheight(0)
    if 0 == a:add_sub
        let cur_height = cur_height + a:increment
    else
        let cur_height = cur_height - a:increment
    endif

    " 如果小于最小高度, 或大于最大高度, 就不会有反应了
    silent exe "normal " . cur_height ."\<C-W>_"
endfunction " }}}
" }}}
"}}}

Plug 'moll/vim-bbye' "主要界面关闭buffer引起的窗口乱的问题{{{
noremap <leader>mq :Bdelete<CR>
inoremap <leader>mq <ESC>:Bdelete<CR>
vnoremap <leader>mq <ESC>:Bdelete<CR>
"}}}

Plug 'DaSea/uncrustify.vim', {'on': 'Uncrustify'} " 代码格式化:{{{
nnoremap <Leader>ff :Uncrustify<CR>
vnoremap <Leader>ff :'<,'>Uncrustify<CR>
"}}}

Plug 'iamcco/dict.vim' " 有道翻译{{{
" 普通模式下，<Leader>d 即可翻译光标下的文本，并在命令行回显
nnoremap <silent> <leader>yd :call dict#Search(expand("<cword>"), "simple")<CR>
" 可视化模式下，<leader>d 即可翻译选中的文本，并在命令行回显
vnoremap <silent> <leader>yd  :<C-U>call dict#VSearch("simple")<CR>
" 普通模式下，<leader>w 即可翻译光标下的文本，并且在Dict新窗口显示
nnoremap <silent> <leader>yw  :call dict#Search(expand("<cword>"), "complex")<CR>
" 可视化模式下，<leader>w 即可翻译选中的文本，并且在Dict新窗口显示
vnoremap <silent> <leader>yw :<C-U>call dict#VSearch("complex")<CR>
" 普通模式下，<leader><leader>r 即可翻译光标下的单词，并替换为翻译的结果
nnoremap <silent> <leader>yr  viw:<C-U>call dict#VSearch("replace")<CR>
" 可视化模式下，<leader><leader>r 即可翻译光标下的单词，并替换为翻译的结果
vnoremap <silent> <leader>yr :<C-U>call dict#VSearch("replace")<CR>
" }}}

Plug 'mbbill/fencview' " (编码检查)auto check Encoding{{{
let g:fencview_autodetect = 1
"}}}

" 补全相关插件, 语言无关 {{{
if exists('g:exvim_custom_path')
    let g:vim_complete_path = g:exvim_custom_path.'/.vimrc.complete'
else
    let g:vim_complete_path = '~/.vimrc.complete'
endif
if filereadable(expand(g:vim_complete_path))
    exec 'source ' . fnameescape(g:vim_complete_path)
endif
"}}}

" 加载语言相关插件{{{
if exists('g:exvim_custom_path')
    let g:vim_language_path = g:exvim_custom_path.'/.vimrc.language'
else
    let g:vim_language_path = '~/.vimrc.language'
endif
if filereadable(expand(g:vim_language_path))
    exec 'source ' . fnameescape(g:vim_language_path)
endif
" }}}

" 异步编译和lint插件 {{{
if 'yes' ==? g:setting.make_lint_need
    Plug 'neomake/neomake', {'on': 'Neomake'}
    nnoremap <unique> <leader>nm :Neomake!<CR>
    let g:neomake_verbose = 1
    let g:neomake_c_lint_maker = {
                \ 'exe': 'clang-tidy',
                \ 'args': ['%:p', '--option', 'x'],
                \ 'errorformat': '%f:%l:%c: %m',
                \ }
    let g:neomake_cpp_lint_maker = {
                \ 'exe': 'clang-tidy',
                \ 'args': ['%:p', '--option', 'x'],
                \ 'errorformat': '%f:%l:%c: %m',
                \ }
    let g:neomake_python_lint_maker = {
                \ 'exe': 'pep8',
                \ 'errorformat': '%f:%l:%c: %m',
                \ }
endif
"}}}

"括号补全, endif等补全{{{
Plug 'jiangmiao/auto-pairs'
let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutBackInsert = '<leader>pb'
" 上面俩项为flyMode下使用
let g:AutoPairsShortcutToggle = '<leader>pp'
let g:AutoPairsShortcutFastWrap = '<leader>pe'
let g:AutoPairsShortcutJump = '<leader>pn'

Plug 'tpope/vim-endwise'
"}}}

" vim documentation {{{
Plug 'asins/vimcdoc' "{{{
" < VIM中文帮助文档:>
" 设定doc文档目录
let helptags=$VIM."/vimfiles/doc"
set helplang=cn
"}}}
"}}}

" TEST {{{
" " test-loading
" echomsg "test-loading: .vimrc"
" keizazcbflrkvbvy
" vsxin:
"}}}

function! PluginLoadFinished() abort "{{{
    for Fn in g:init_func_list
        call Fn()
    endfor
endfunction "}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
