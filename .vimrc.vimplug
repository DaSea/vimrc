" Vundle {{{
" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" 插件初始化函数list
let g:init_func_list = []
"}}}

"========================================================================================
" 使用到的插件的配置(The setting of the used plugin)
"========================================================================================
" ex系列插件 {{{

Plug 'DaSea/ex-config'
" Fork 'exvim/ex-config', change '.exvim.project_name' to '.exvim'
" ---------------------------------------------------
nnoremap <unique> <leader>ve :call exconfig#edit_cur_vimentry ()<CR>

Plug 'DaSea/ex-utility'
" ---------------------------------------------------
nnoremap <unique> <silent> <Leader>ad :EXbd<CR>
nnoremap <unique> <silent> <leader>an :EXbn<CR>
nnoremap <unique> <silent> <leader>ap :EXbp<CR>
nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
nnoremap <unique> <silent> <Leader><Tab> :EXsw<CR>
nmap <unique> <silent> <Leader><Esc> :EXgp<CR><ESC>
" 定义运行qml文件的脚本
nnoremap <leader>mr :call system("qmlscene.exe ". expand("%"))<CR>

Plug 'exvim/ex-aftercolors'
" ---------------------------------------------------

Plug 'DaSea/ex-vimentry'
"Fork 'exvim/ex-vimentry', and change default template
" ---------------------------------------------------

Plug 'exvim/ex-project'
" ---------------------------------------------------
let g:ex_project_winpos='left'
let g:ex_project_winsize=28
let g:ex_project_winsize_zoom=40
nnoremap <unique> <silent> <F3> :EXProjectToggle<cr>

Plug 'exvim/ex-gsearch'
" ---------------------------------------------------
let g:ex_gsearch_ignore_case = 0
function! ExgsearchInit() abort "{{{
    call exgsearch#register_hotkey( 100, 0, '<leader>gs', ":EXGSearchToggle<CR>", 'Toggle global search window.' )
    call exgsearch#register_hotkey( 101, 0, '<leader>gg', ":EXGSearchCWord<CR>", 'Search current word.' )
    call exgsearch#register_hotkey( 102, 0, '<leader><S-f>', ":GS ", 'Shortcut for :GS' )
    call exgsearch#register_hotkey( 2, 1, 'q', ":EXGSearchClose<CR>" , 'Close window.')
endfunction "}}}
call add(g:init_func_list, function('ExgsearchInit'))

Plug 'exvim/ex-tags'
" ---------------------------------------------------
function! ExtagsInit() abort "{{{
    call extags#register_hotkey( 100, 0, '<leader>ts', ":EXTagsToggle<CR>", 'Toggle tag select window.' )
    call extags#register_hotkey( 101, 0, '<leader>]', ":EXTagsCWord<CR>", 'Tag select current word.' )
    " DISABLE: nnoremap <unique> <leader>] :exec 'ts ' . expand('<cword>')<CR>
endfunction "}}}
call add(g:init_func_list, function('ExtagsInit'))

Plug 'exvim/ex-symbol'
" ---------------------------------------------------
function! Exsymbol() abort "{{{
    call exsymbol#register_hotkey( 100, 0, '<leader>ss', ":EXSymbolList<CR>", 'List all symbols.' )
    call exsymbol#register_hotkey( 101, 0, '<leader>sq', ":EXSymbolOpen<CR>", 'Open symbols window.' )
    call exsymbol#register_hotkey( 102, 0, '<leader>sg', ":EXSymbolCWord<CR>", 'List symbols contains current word.' )

    if has('gui_running')
        if has ('mac')
            call exsymbol#register_hotkey( 102, 0, 'Ò', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
        else
            call exsymbol#register_hotkey( 102, 0, '<M-L>', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
        endif
    endif
endfunction "}}}
call add(g:init_func_list, function('Exsymbol'))
let g:ex_symbol_select_cmd = 'TS'

Plug 'exvim/ex-cscope'
" ---------------------------------------------------
function! Excscope() abort "{{{
    call excscope#register_hotkey( 100, 0, '<leader>cd', ":EXCSToggle<CR>", 'Toggle cscope window.' )
endfunction "}}}
call add(g:init_func_list, function('Excscope'))

Plug 'exvim/ex-qfix'
" ---------------------------------------------------
function! Exqfix() abort "{{{
    call exqfix#register_hotkey( 100, 0, '<leader>qf', ":EXQFixToggle<CR>", 'Toggle quickfix window.' )
    call exqfix#register_hotkey( 101, 0, '<leader>qq', ":EXQFixPaste<CR>", 'Open quickfix window and paste error list from register *.' )
endfunction "}}}
call add(g:init_func_list, function('Exqfix'))

" Plug 'exvim/ex-hierarchy'
" 生成继承关系图
" ---------------------------------------------------
" nnoremap <unique> <leader>hv :EXHierarchyCWord<CR>

Plug 'exvim/ex-showmarks'
" ex-showmarks: invoke by m... or <leader>mm, <leader>ma
" ---------------------------------------------------
" TODO: bootleq/ShowMarks on github is well organized in code, but have lots
" bugs, consider merge his code and fixes the bugs
let g:showmarks_enable = 1
let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:showmarks_ignore_type = 'hqm' " Ignore help, quickfix, non-modifiable buffers
" Hilight lower & upper marks
let g:showmarks_hlline_lower = 1
let g:showmarks_hlline_upper = 0

" Plug 'exvim/ex-visincr'
" ex-visincr: invoke when select text and type ':II'
" ---------------------------------------------------

Plug 'exvim/ex-matchit'
" ex-matchit: invoke by %
" ---------------------------------------------------

Plug 'exvim/ex-easyhl'
" ---------------------------------------------------
" 自动高亮当前光标下单词
" let g:ex_easyhl_auto_cursorhl = 1

Plug 'exvim/ex-searchcompl'
" invoke by /
" ---------------------------------------------------
" }}}

" 版本控制(git,svn)及修改状态显示{{{
" 使用git
if g:setting.version_status !=? 'no'
    Plug 'tpope/vim-fugitive' "{{{
    "}}}
endif

" =================================================================
" 显示与版本控制中的文件的差异
if g:setting.version_status ==? 'git'
    Plug 'airblade/vim-gitgutter' "{{{
    nmap ]h <Plug>GitGutterNextHunk
    nmap [h <Plug>GitGutterPrevHunk
    let g:gitgutter_realtime = 0
    let g:gitgutter_eager = 0
    "}}}
endif

if g:setting.version_status ==? 'git_svn'
    Plug 'mhinz/vim-signify' "{{{
    " let g:signify_disable_by_default = 1
    let g:signify_cursorhold_insert     = 0
    let g:signify_cursorhold_normal     = 1
    let g:signify_update_on_bufenter    = 0
    let g:signify_update_on_focusgained = 1
    let g:signify_vcs_list = [ 'git', 'svn' ]
    let g:signify_skip_filetype = {'vimfiler': 1, 'unite': 1, 'exproject': 1 }
    "}}}
endif
"}}}

"  内容完成(括号补全, vim补全) {{{
if 'yes' ==? g:setting.cpp_enable "{{{
    Plug 'vim-scripts/OmniCppComplete'

    if 0
        Plug 'osyo-manga/vim-marching' " {{{
        let g:marching_clang_command = "D:/Develop/LLVM/bin/clang.exe"

        let g:marching#clang_command#options = {
                    \   "cpp" : "-std=gnu++1y"
                    \}

        let g:marching_include_paths = [
                    \   "D:/Develop/msys64/mingw64/include/c++/5.4.0"
                    \]

        let g:marching_enable_neocomplete = 1

        set updatetime=200
        let g:marching_enable_refresh_always=1

        imap <buffer> <C-x><C-o> <Plug>(marching_start_omni_complete)
        imap <buffer> <C-x><C-x><C-o> <Plug>(marching_force_start_omni_complete)

        let g:marching_backend = "sync_clang_command"
        " }}}
    endif
endif "}}}

"  Php自动补全{{{
Plug 'shawncplus/phpcomplete.vim',{'for': 'php'}
Plug '2072/PHP-Indenting-for-VIm',{'for': 'php'}
Plug 'StanAngeloff/php.vim',{'for': 'php'}
" }}}

if g:setting.complete_method ==? 'neocomplete'
    Plug 'Shougo/neocomplete.vim' "{{{

    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#enable_camel_case = 1
    let g:neocomplete#max_list = 20
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
                \ 'default' : ''
                \ }
                "  'java' : '~/.vim/dict/java.dict',
                " \ 'ruby' : '~/.vim/dict/ruby.dict',
                " \ 'scala' : '~/.vim/dict/scala.dict',
    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'
    " Plug key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
        return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
        " For no inserting <CR> key.
        " return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction

    " <TAB>: completion.
    " SuperTab like snippets behavior.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
                \ "\<Plug>(neosnippet_expand_or_jump)" :
                \ "\<TAB>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

    " let g:neocomplete#force_overwrite_completefunc = 1
    " Enable omni completion.
    autocmd FileType c,cpp setlocal omnifunc=omni#cpp#complete#Main
    autocmd FileType go setlocal omnifunc=gocode#Complete
    autocmd FileType php set omnifunc=phpcomplete#CompletePHP

    " Enable heavy omni completion.
    if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
    endif
    " for c and c++
    let g:neocomplete#force_omni_input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
    let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
    let g:neocomplete#force_omni_input_patterns.php =  '\h\w*\|[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
    " if !exists('g:neocomplete#sources#omni#input_patterns')
        " let g:neocomplete#sources#omni#input_patterns = {}
    " endif
    " for c and c++
    " let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
    " let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
    "}}}
endif

if g:setting.complete_method ==? 'neocomplcache'
    Plug 'Shougo/neocomplcache.vim' "{{{
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplcache.
    let g:neocomplcache_enable_at_startup = 1
    " Use smartcase.
    let g:neocomplcache_enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplcache_min_syntax_length = 3
    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

    " Enable heavy features.
    " Use camel case completion.
    "let g:neocomplcache_enable_camel_case_completion = 1
    " Use underbar completion.
    "let g:neocomplcache_enable_underbar_completion = 1

    " Define dictionary.
    let g:neocomplcache_dictionary_filetype_lists = {
                \ 'default' : '',
                \ 'vimshell' : $HOME.'/.vimshell_hist',
                \ 'scheme' : $HOME.'/.gosh_completions'
                \ }

    " Define keyword.
    if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

    " Plug key-mappings.
    inoremap <expr><C-g>     neocomplcache#undo_completion()
    inoremap <expr><C-l>     neocomplcache#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
        return neocomplcache#smart_close_popup() . "\<CR>"
        " For no inserting <CR> key.
        "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplcache#close_popup()
    inoremap <expr><C-e>  neocomplcache#cancel_popup()
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

    " For cursor moving in insert mode(Not recommended)
    "inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
    "inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
    "inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
    "inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
    " Or set this.
    "let g:neocomplcache_enable_cursor_hold_i = 1
    " Or set this.
    "let g:neocomplcache_enable_insert_char_pre = 1

    " AutoComplPop like behavior.
    "let g:neocomplcache_enable_auto_select = 1

    "let g:neocomplcache_enable_auto_select = 1
    "let g:neocomplcache_disable_auto_complete = 1
    "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplcache_force_omni_patterns')
        let g:neocomplcache_force_omni_patterns = {}
    endif
    let g:neocomplcache_force_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplcache_force_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplcache_force_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
    "}}}
endif

Plug 'Shougo/neoinclude.vim' "{{{
" disable ctags
let g:neoinclude#ctags_command = ""
" 字典,设置路径
" let g:neoinclude#paths = {'cpp': 'path'}
"}}}

Plug 'Shougo/neosnippet.vim' "{{{
let g:neosnippet#disable_runtime_snippets = {
            \   '_' : 1,
            \ }
let g:neosnippet#snippets_directory=g:setting.private_snippets
let g:neosnippet#enable_complete_done = 1
let g:neosnippet#enable_conceal_markers = 0
" let g:neosnippet#enable_snipmate_compatibility=1
" Plug key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
" 编辑snippet
nnoremap <leader>ns :execute ":NeoSnippetEdit ".&filetype<CR>
"}}}

" vim 补全{{{
if 'yes' ==? g:setting.vimcomplete_need
    Plug 'Shougo/neco-vim', {'for': 'vim'}
endif
"}}}

"括号补全{{{
Plug 'jiangmiao/auto-pairs'
let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutBackInsert = '<leader>pb'
" 上面俩项为flyMode下使用
let g:AutoPairsShortcutToggle = '<leader>pp'
let g:AutoPairsShortcutFastWrap = '<leader>pe'
let g:AutoPairsShortcutJump = '<leader>pn'

Plug 'tpope/vim-endwise'
"}}}
"}}}

" gtags设置{{{
Plug 'aceofall/gtags.vim'
" set cscopetag " 使用cscope作为tags命令
" set cscopeprg='gtags-cscope' "使用gtags-cscope 替代自带的ctags和cscope
let g:GtagsCscope_Auto_Load = 1
let g:GtagsCscope_Auto_Map = 1
let g:GtagsCscope_Quiet = 1
" gtags.vim设置
let g:Gtags_OpenQuickfixWindow = 0
let g:Gtags_No_Auto_Jump = 1
" 快捷键设置
" 搜索当前光标下单词
nnoremap ,gd :GtagsCursor<CR>
" 查找光标下引用
nnoremap ,gg :call FindReferenceTag(expand("<cword>"))<CR>
function! FindReferenceTag(fTag) abort
    execute "Gtags -r " . a:fTag
    " TODO :goto quickfix 窗口
endfunction
"}}}

" 文件导航(unite, a.vim) {{{
Plug 'Shougo/vimproc.vim'
Plug 'Shougo/unite.vim'
Plug 'Shougo/neomru.vim' " {{{
" 基本设置
let g:unite_force_overwrite_statusline = 0
" 设置匹配模式
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
let g:unite_source_file_mru_time_format = "%m/%d %T "
let g:unite_source_directory_mru_limit = 100
let g:unite_source_directory_mru_time_format = "%m/%d %T "
let g:unite_source_file_rec_max_depth = 10
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
"let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable=1
let g:unite_prompt='▷'
let g:unite_winheight=25
" Using ag or pt as recursive command.
if executable('ag')
    " https://github.com/ggreer/the_silver_searcher
    let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
                \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
                \  '''.hg'' --ignore ''.svn'' --ignore ''.git'''
    let g:unite_source_grep_recursive_opt = '-r'
    let g:unite_source_grep_encoding = 'utf-8'
elseif executable('pt')
    " https://github.com/monochromegane/the_platinum_searcher
    let g:unite_source_rec_async_command = ['pt', '--follow', '--nogroup', '--nocolor', '-S', '-g']
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_grep_encoding = 'utf-8'
endif
"}}}

Plug 'Shougo/vimfiler.vim'  " 替换nertw(文件浏览器) {{{
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_force_overwrite_statusline = 0
let g:vimfiler_min_cache_files = 500
" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = '¦'
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_readonly_file_icon = ''
let g:vimfiler_marked_file_icon = '√'
let g:vimfiler_expand_jump_to_first_child = 0
let g:vimfiler_ignore_pattern = []

let g:vimfiler_as_default_explorer = 1
let g:vimfiler_force_overwrite_statusline = 0
let g:vimfiler_min_cache_files = 500
" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = '¦'
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_readonly_file_icon = ''
let g:vimfiler_marked_file_icon = '√'
let g:vimfiler_expand_jump_to_first_child = 0
let g:vimfiler_ignore_pattern = []
" }}}

" 按键绑定{{{
" 最近文件
nnoremap <silent> <leader>jf :<C-u>Unite -no-split -buffer-name=mru -start-insert file_mru<CR>
" 浏览当前工程所在目录的mru
" nnoremap <silent> <leader>jf :<C-u>Unite -no-split -buffer-name=mru -start-insert file_mru<CR>

" 文件查找
nnoremap <silent> <C-p> :<C-u>Unite -no-split -buffer-name=files -start-insert -update-time=100 file_rec<CR>
nnoremap <silent> <leader>ft :<C-u>Unite -no-split -buffer-name=files -start-insert file_rec/async:!<CR>
nnoremap <silent> <leader>fs :Unite -no-split -buffer-name=files -start-insert file_rec/async<cr>
" 打开的buffer查找
nnoremap <silent> <leader>fl :<C-u>Unite -buffer-name=buffer buffer<CR>
nnoremap <silent> <leader>fk :<C-u>Unite -quick-match -buffer-name=buffer buffer<CR>
" 文件内搜索
" nnoremap <silent> <leader>gw :<C-u>Unite grep:%:expand("<cword>")<CR>
nnoremap <silent> <leader>gw :<C-u>UniteWithCursorWord grep<CR>
" 需要一个在任意时候可以打开文件所在目录列表的定义
nnoremap <silent> <leader>fb :VimFilerBufferDir -buffer-name=explorer
            \ -split -direction=aboveleft -simple -winwidth=35 -toggle<CR>
" 文件浏览器
nnoremap <F2> :VimFilerExplorer<CR>
autocmd FileType vimfiler nmap <silent><buffer><expr> <CR> vimfiler#smart_cursor_map(
            \ "\<Plug>(vimfiler_expand_tree)",
            \ "\<Plug>(vimfiler_edit_file)")
"}}}

function! UnitInit() abort " unite 系列加载完成后的初始化{{{
    " direction
    call unite#custom#profile('default', 'context', {
                \   'direction': 'botright',
                \ })
    call vimfiler#custom#profile('default', 'context', {
                \ 'explorer' : 1,
                \ 'safe': 0,
                \ 'autocd': 1,
                \ })
    " Set up some custom ignores
    call unite#custom#source('file_rec,file_rec/async,file_mru,file',
                \ 'ignore_pattern',join([
                \ '\.git/',
                \ '\.svn/',
                \ '\.gitignore/',
                \ '\.bundle/',
                \ '\.neobundle/',
                \ '\.exvim/',
                \ '\.metadata/',
                \ '\release/',
                \ '\debug/',
                \ ], '\|'))
    " call unite#custom#source('file_rec/async,file_rec/git', 'ignore_globs', [])
endfunction "}}}
call add(g:init_func_list, function('UnitInit'))
"}}}

Plug 'DaSea/ex-avim' " h与cpp文件的交换{{{
" 用于切换C/C++头文件
" :A     ---切换头文件并独占整个窗口
" :AV    ---切换头文件并垂直分割窗口
" :AS    ---切换头文件并水平分割窗口
" let g:alternateSearchPath = "D:\\Develop\\msys64\\mingw64\\include\\c++\\5.4.0"
let g:alternateSearchPath = "D:\\Develop\\Java\\android-ndk-r11b\\sources\\cxx-stl\\gnu-libstdc++\\4.9\\include"
nnoremap <silent> <leader>ah :A<CR>
nnoremap <silent> <leader>av :AV<CR>
nnoremap <silent> <leader>as :AS<CR>
"}}}
"}}}

" 由于unite.vim浏览文件实在慢, 所以用LeaderF替换 {{{
Plug 'Yggdroot/LeaderF'
let g:Lf_ShowRelativePath = 1
let g:Lf_WindowPosition = 0
let g:Lf_ShortcutF = '<Leader>lf'
let g:Lf_WildIgnore = {
            \ 'dir': ['.svn','.git', '.exvim', '.vscode', '.setting', '.imdone', 'bin', 'res'. 'obj'],
            \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]', '*.png', "*.dll",
            \ '*.exvim', '*.class', '*.o.d', '.setting', '.project']
            \}
"}}}

"  文件内跳转{{{
Plug 'Shougo/unite-outline' " 函数跳转等变量跳转{{{
nnoremap <leader>fm :Unite -start-insert -no-split -buffer-name=outline outline<CR>
"}}}

Plug 'rhysd/clever-f.vim' " 行内搜索{{{
let g:clever_f_across_no_line = 1
let g:clever_f_smart_case = 1
" }}}

Plug 'majutsushi/tagbar' " 主要为了在状态栏显示当前行所在函数{{{
nnoremap <Leader>tb :TagbarToggle<CR>
" }}}

Plug 'Lokaltog/vim-easymotion' "快速跳转{{{
" Invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
" ---------------------------------------------------
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
" map <leader> <Plug>(easymotion-prefix)
map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)
map <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
map <leader><leader>. <Plug>(easymotion-repeat)
"}}}
"}}}

"文件内容搜索和替换, undotree{{{
" Plug 'DaSea/ctrlsf.vim',{'on': 'CtrlSF'}
Plug 'dyng/ctrlsf.vim',{'on': 'CtrlSF'} "搜索工程下文件{{{
" Fork'dyng/ctrlsf.vim', and add g:ctrlsf_vcs_folder;
"---------------------------------------------------------------------
" 设置CtrlSF使用的搜索工具,默认使用ag,如果没有ag,则考虑使用ack
" let g:ctrlsf_ackprg = 'pt'
" 是否在ctrlsf搜索结果打开其他窗口时,关闭搜索结果窗口
let g:ctrlsf_auto_close = 0
" 大小写敏感
let g:ctrlsf_case_sensitive = 'yes'
" 默认搜索路径, 设置为project则从本文件的工程目录搜索
let g:ctrlsf_default_root = 'project+fw'
" 工程目录的顶级文件夹
" let g:ctrlsf_vcs_folder = ['.exvim', '.git', '.hg', '.svn', '.bzr', '_darcs']
" make result windows compact
let g:ctrlsf_indent = 2
" width or height
" 显示的上下文函数
let g:ctrlsf_context = '-B 0 -A 0'
" 高亮匹配行: o->打开的目标文件;p->预览文件
let g:ctrlsf_selected_line_hl = 'op'
nnoremap <F5> :CtrlSFToggle<CR>
nnoremap <leader>sw :call CtrlsfCurWord(expand("<cword>"))<CR>
function! CtrlsfCurWord(word) abort
    " TODO: 需要修改为根据exvim工程文件类型进行搜索
    let s:type = &filetype
    if "c" == s:type
        let s:type = "cc"
    endif
    let s:filetype = '-filetype '.s:type
    " -w whole word;
    execute "CtrlSF ".s:filetype.' '. a:word
endfunction
"}}}

Plug 'terryma/vim-multiple-cursors' "多项选择{{{
"---------------------------------------------------------------------
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key = '<F6>'
let g:multi_cursor_next_key = '<C-j>'
let g:multi_cursor_prev_key = '<C-k>'
let g:multi_cursor_skip_key = '<C-x>'
let g:multi_cursor_quit_key = '<ESC>'
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction
"}}}

Plug 'mbbill/undotree',{'on': 'UndotreeToggle'} " undo 历史树,直观显示,快速选择恢复{{{
if has("persistent_undo")
    set undodir=g:setting.undodir
    set undofile
endif
"}}}
"}}}

"  内容注释及选择{{{
Plug 'scrooloose/nerdcommenter' " 快速注释{{{
" Invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
" ---------------------------------------------------
" 我主要用于C/C++代码注释(其它的也行)
" 以下为插件默认快捷键，其中的说明是以C/C++为例的，其它语言类似
" <Leader>ci 以每行一个 /* */ 注释选中行(选中区域所在行)，再输入则取消注释
" <Leader>cm 以一个 /* */ 注释选中行(选中区域所在行)，再输入则称重复注释
" <Leader>cc 以每行一个 /* */ 注释选中行或区域，再输入则称重复注释
" <Leader>cu 取消选中区域(行)的注释，选中区域(行)内至少有一个 /* */
" <Leader>ca 在/*...*/与//这两种注释方式中切换（其它语言可能不一样了）
" <Leader>cA 行尾注释
" 注释的时候加个空格
let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
"}}}

Plug 'DaSea/DoxygenToolkit.vim' "生成文件注释和函数注释{{{
" ---------------------------------------------------
"  TODO: 考虑加入在已经有注释的情况下刷洗注释,比较难
" let g:DoxygenToolkit_commentType = "C++"
let g:DoxygenToolkit_briefTag_pre="@brief  "
let g:DoxygenToolkit_paramTag_pre="@param  "
let g:DoxygenToolkit_returnTag="@return "
" let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------"
" let g:DoxygenToolkit_blockFooter="--------------------------------------------------------------------------"
let g:DoxygenToolkit_authorName=g:setting.author_name
let g:DoxygenToolkit_licenseTag="None"
let g:DoxygenToolkit_compactDoc="no"
" map
nnoremap <leader>di :DoxFunc<CR>
nnoremap <Leader>df :DoxFile<CR>
"}}}
"}}}

" 内容快速移动 {{{
Plug 'matze/vim-move'
" alt + j : 下移; alt+k: 上移;
"}}}

"  代码静态分析{{{
if 'yes' ==? g:setting.cppcheck_need "使用cpp_check静态检查文件,依赖unite.vim{{{
    Plug 'DaSea/unite-cppcheck'
endif "}}}

if 'yes' ==? g:setting.syntastic_need "代码语法等检查{{{
    Plug 'scrooloose/syntastic'
    " Invoke when you save file and have syntac-checker
    " ---------------------------------------------------
    " this will make html file by Angular.js ignore errors
    let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
endif "}}}
" }}}

" c++, qml, ndk等相关的语法扩展 {{{
if 'yes' ==? g:setting.cpp_syntax_extent "c++语法扩展{{{
    Plug 'octol/vim-cpp-enhanced-highlight'
    " -----------------------------------------------------------------------------
    let g:cpp_class_scope_highlight=1
    let g:cpp_experimental_template_highlight = 1

endif "}}}

Plug 'DaSea/vim-syntax' " 杂7杂8的, 有qml, 有cpp文件中的doxygen, ndk高亮等{{{
let g:ndk_syntax_enable = 1
let g:doxygen_syntax_enable = 1
"}}}

Plug 'dzeban/vim-log-syntax'
"}}}

" 界面显示相关{{{
if g:setting.starty_screen ==? 'yes'
    Plug 'mhinz/vim-startify' " 开始界面,可以显示MRU, Session等{{{
    "开始欢迎界面
    nnoremap <F4> :Startify<CR>
    " set session path
    let g:startify_session_dir = 'D:/Develop/exVim/vimfiles/session'
    let g:startify_list_order = [
                \ ['   MRU:'],
                \ 'files',
                \ ['   MRU(Dir):'],
                \ 'dir',
                \ ['   Sessions:'],
                \ 'sessions',
                \ ['   Bookmarks:'],
                \ 'bookmarks',
                \ ]
    let g:startify_custom_header = [
                \ '   -----------------------------------------------------------',
                \ "   |     Vim是个慈善软件,如需了解,请阅读':help uganda'       |",
                \ '   |                                                         |',
                \ '   |                 o  ^--^                                 |',
                \ '   |                  o (oo)\=======                         |',
                \ '   |                    (__)\       )\/\                     |',
                \ '   |                        ||----w |                        |',
                \ '   |                        ||     ||                        |',
                \ '   |                                                         |',
                \ '   |                                                         |',
                \ '   -----------------------------------------------------------',
                \ ]
    let g:startify_custom_footer = ['', "   可以做到,相信自己! ", '']
    "}}}
endif

Plug 'ntpeters/vim-better-whitespace' "显示行尾多余空格并快速删除{{{
" 显示行尾空格(better)
" ----------------------------------------------------
let g:better_whitespace_filetypes_blacklist = ['unite', 'vimfiler']
noremap CS :StripWhitespace<CR>
"}}}

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes' " airline状态栏{{{
let g:airline_powerline_fonts = 1
let g:airline_theme = g:setting.status_color
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_detect_crypt=0
let g:airline_detect_spell=0
let g:airline_detect_iminsert=0
let g:airline_extensions = ['unite', 'tagbar', 'quickfix']
" 各个部分的设置简化
let g:airline_section_c = '%t'
let g:airline_section_z = '%l%{g:airline_symbols.linenr}%L'
let g:airline_mode_map = {
            \ '__' : '-',
            \ 'n'  : 'N',
            \ 'i'  : 'I',
            \ 'R'  : 'R',
            \ 'c'  : 'C',
            \ 'v'  : 'V',
            \ 'V'  : 'V',
            \ '' : 'V',
            \ 's'  : 'S',
            \ 'S'  : 'S',
            \ '' : 'S',
            \ }
" }}}

Plug 'Yggdroot/indentLine' "对齐线{{{
" ---------------------------------------------------
let g:indentLine_color_gui = '#FF4040'
" let g:indentLine_char = '|'
let g:indentLine_char = '┊'
let g:indentLine_faster = 1
"}}}

" colorscheme 插件 {{{
Plug 'altercation/vim-colors-solarized'
" ---------------------------------------------------
let g:solaried_bold = 1
let g:solaried_underline = 1
let g:solaried_italic = 0

Plug 'joshdick/onedark.vim'
let g:onedark_termcolors=256

" 个人收集的一些主题
" Plug 'DaSea/vim-personcolors'
"}}}

Plug 'ujihisa/unite-colorscheme' "快速浏览已有的颜色主题并选择{{{
"}}}

" buffer窗口的大小的改变{{{
" 宽度与高度相等
nnoremap W= <C-W>=
" 宽度的变化
nnoremap WA :call WinWidthChange(10, 0)<CR>
nnoremap WS :call WinWidthChange(10, 1)<CR>
" 高度的变化
nnoremap HA :call WinHeightChange(10, 0)<CR>
nnoremap HS :call WinHeightChange(10, 1)<CR>

" 宽度改变->(increment: 要增加或减少的宽度, add_sub: 0, 增加, 1, 减少){{{
function! WinWidthChange(increment, add_sub) abort
    let cur_width = winwidth(0)
    if 0 == a:add_sub
        let cur_width = cur_width + a:increment
    else
        let cur_width = cur_width - a:increment
    endif
    " 如果小于最小宽度, 大于最大宽度, 就不会有什么变化了
    silent exe "normal " . cur_width ."\<C-W>|"
endfunction " }}}

" 高度改变->(increment: 要增加或减少的高度; add_sub: 0, 增加, 1, 减少) {{{
function! WinHeightChange(increment, add_sub) abort
    let cur_height = winheight(0)
    if 0 == a:add_sub
        let cur_height = cur_height + a:increment
    else
        let cur_height = cur_height - a:increment
    endif

    " 如果小于最小高度, 或大于最大高度, 就不会有反应了
    silent exe "normal " . cur_height ."\<C-W>_"
endfunction " }}}
" }}}
"}}}

"VIM关闭问题{{{
Plug 'moll/vim-bbye' "{{{
noremap <leader>mq :Bdelete<CR>
inoremap <leader>mq <ESC>:Bdelete<CR>
vnoremap <leader>mq <ESC>:Bdelete<CR>
"}}}
""}}}

" vim文档及WIKI, org{{{
Plug 'asins/vimcdoc' "{{{
" < VIM中文帮助文档:>
" 设定doc文档目录
let helptags=$VIM."/vimfiles/doc"
set helplang=cn
"}}}

Plug 'jceb/vim-orgmode'
Plug 'vim-scripts/utl.vim' " org{{{
" 快捷键记录:
" <leader>hn <leader>hh, <leader>hN:插入标题
" yah , dah : 复制和删除heading, yar, dar: 复制和删除subtree
" >> << 可以升降heading的等级; >ar <ar : 可以升降subtree的等级
" <leader>cl , <leader>CL 插入plainlist, \cn,\cc,\cN:切换,插入checkbox
" \si, \sa : 插入时间;  \ct: TODO 之间切换状态; \st,\ft: tag

" 配置
" let g:org_todo_keywords=['TODO', 'VERIFY', '|', 'DONE', 'DELEGATED']
let g:org_agenda_files = ['E:\\Self\\01_mywiki\\gtd\\gtd.org']
" 打开todo文件 
nnoremap <leader>oo :call OpenOrgToDoFile()<CR>
function! OpenOrgToDoFile() abort "{{{
    let gtdFile = 'E:\Self\01_mywiki\gtd\gtd.org'
    silent! execute 'edit! ' . gtdFile
endfunction " }}}
" }}}
"}}}

" 代码格式化:{{{
"}}}

" markdown支持 {{{
if g:setting.markdown_need ==? 'yes'
    Plug 'godlygeek/tabular', {'for': 'md'}
    Plug 'plasticboy/vim-markdown', {'for': 'md'}
endif
"}}}

" golang开发支持 {{{
if 'yes' ==? g:setting.golang_enable
    Plug 'fatih/vim-go',{'for': 'go'}
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_interfaces = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    let g:go_fmt_command = "goimports"
    let g:go_fmt_autosave = 0
    let g:go_play_open_browser = 0
    let g:go_bin_path = 'D:/Develop/GO/bin'
    let g:go_snippet_engine = "neosnippet"
endif
"}}}

" exvim工程插件 {{{
nnoremap <leader>GS :call GSimplePrj()<CR>
" 切换至工程目录 {{{
function! GSimplePrj() abort
    let curPath = expand("%:p:h")
    let prjRoot = ex#path#root(curPath)
    if ("" == prjRoot)
        let prjRoot == curPath
    endif

    let prjRoot = ex#path#auto_translate(prjRoot)
    execute 'cd! ' . prjRoot

    silent! execute 'cs add GTAGS'
endfunction " }}}

Plug 'DaSea/ex-prjlist'
" let g:exprj_list_cache_directory = 'D:/Develop/cache'
" let g:exprj_list_win_pos = "botright"
" let g:exprj_list_win_szie = 30
"}}}

" Encoding check{{{
Plug 'mbbill/fencview'
let g:fencview_autodetect = 1
"}}}

" TEST {{{
" " test-loading
" echomsg "test-loading: .vimrc"
" keizazcbflrkvbvy
" vsxin: 
"}}}

function! PluginLoadFinished() abort "{{{
    for Fn in g:init_func_list
        call Fn()
    endfor
endfunction "}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
