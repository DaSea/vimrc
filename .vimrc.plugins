" Pathogen or Vundle (deafult is Vundle) {{{

" Comment-out if you want to use pahogen
" execute pathogen#infect()
" com! -nargs=+ Bundle

" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" let Vundle manage Vundle, required
" ---------------------------------------------------
Plugin 'gmarik/Vundle.vim'
"}}}


"========================================================================================
"
" 使用到的插件的配置(The setting of the used plugin)
"
"========================================================================================
" ex系列插件 {{{

Plugin 'exvim/ex-config'
" ---------------------------------------------------
nnoremap <unique> <leader>ve :call exconfig#edit_cur_vimentry ()<CR>

Plugin 'exvim/ex-utility'
" ---------------------------------------------------
nnoremap <unique> <silent> <Leader>bd :EXbd<CR>
nnoremap <unique> <silent> <C-l> :EXbn<CR>
nnoremap <unique> <silent> <C-h> :EXbp<CR>
nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
nnoremap <unique> <silent> <Leader><Tab> :EXsw<CR>
nmap <unique> <silent> <Leader><Esc> :EXgp<CR><ESC>

Plugin 'exvim/ex-aftercolors'
" ---------------------------------------------------

Plugin 'exvim/ex-vimentry'
" ---------------------------------------------------

Plugin 'exvim/ex-project'
" ---------------------------------------------------
let g:ex_project_winpos='left'
let g:ex_project_winsize=28
let g:ex_project_winsize_zoom=40
nnoremap <unique> <silent> <F3> :EXProjectToggle<cr>


Plugin 'exvim/ex-gsearch'
" ---------------------------------------------------
let g:ex_gsearch_ignore_case = 0
call exgsearch#register_hotkey( 100, 0, '<leader>gs', ":EXGSearchToggle<CR>", 'Toggle global search window.' )
call exgsearch#register_hotkey( 101, 0, '<leader>gg', ":EXGSearchCWord<CR>", 'Search current word.' )
call exgsearch#register_hotkey( 102, 0, '<leader><S-f>', ":GS ", 'Shortcut for :GS' )

Plugin 'exvim/ex-tags'
" ---------------------------------------------------
call extags#register_hotkey( 100, 0, '<leader>ts', ":EXTagsToggle<CR>", 'Toggle tag select window.' )
call extags#register_hotkey( 101, 0, '<leader>]', ":EXTagsCWord<CR>", 'Tag select current word.' )
" DISABLE: nnoremap <unique> <leader>] :exec 'ts ' . expand('<cword>')<CR>

Plugin 'exvim/ex-symbol'
" ---------------------------------------------------
call exsymbol#register_hotkey( 100, 0, '<leader>ss', ":EXSymbolList<CR>", 'List all symbols.' )
call exsymbol#register_hotkey( 101, 0, '<leader>sq', ":EXSymbolOpen<CR>", 'Open symbols window.' )
call exsymbol#register_hotkey( 102, 0, '<leader>sg', ":EXSymbolCWord<CR>", 'List symbols contains current word.' )

if has('gui_running')
    if has ('mac')
        call exsymbol#register_hotkey( 102, 0, 'Ò', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
    else
        call exsymbol#register_hotkey( 102, 0, '<M-L>', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
    endif
endif
let g:ex_symbol_select_cmd = 'TS'

Plugin 'exvim/ex-cscope'
" ---------------------------------------------------
call excscope#register_hotkey( 100, 0, '<leader>cd', ":EXCSToggle<CR>", 'Toggle cscope window.' )

Plugin 'exvim/ex-qfix'
" ---------------------------------------------------

call exqfix#register_hotkey( 100, 0, '<leader>qf', ":EXQFixToggle<CR>", 'Toggle quickfix window.' )
call exqfix#register_hotkey( 101, 0, '<leader>qq', ":EXQFixPaste<CR>", 'Open quickfix window and paste error list from register *.' )

" Plugin 'exvim/ex-hierarchy'
" ---------------------------------------------------
" nnoremap <unique> <leader>hv :EXHierarchyCWord<CR>

Plugin 'exvim/ex-autocomplpop'
" invoke when you input text
" ---------------------------------------------------

Plugin 'exvim/ex-showmarks'
" ex-showmarks: invoke by m... or <leader>mm, <leader>ma
" ---------------------------------------------------
" TODO: bootleq/ShowMarks on github is well organized in code, but have lots
" bugs, consider merge his code and fixes the bugs
let g:showmarks_enable = 1
let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:showmarks_ignore_type = 'hqm' " Ignore help, quickfix, non-modifiable buffers
" Hilight lower & upper marks
let g:showmarks_hlline_lower = 1
let g:showmarks_hlline_upper = 0

Plugin 'exvim/ex-visincr'
" ex-visincr: invoke when select text and type ':II'
" ---------------------------------------------------

Plugin 'exvim/ex-matchit'
" ex-matchit: invoke by %
" ---------------------------------------------------

Plugin 'exvim/ex-easyhl'
" ---------------------------------------------------

Plugin 'exvim/ex-searchcompl'
" invoke by /
" ---------------------------------------------------

Plugin 'exvim/ex-colorschemes'
" ---------------------------------------------------

Plugin 'exvim/ex-cref'
" Invoke by <leader>cr
" ---------------------------------------------------
" this is modified for default c syntax highlight settings
" make it don't highlight error pattern
let c_gnu = 1
let c_no_curly_error = 1
let c_no_bracket_error = 1

" }}}

" 文件导航 {{{
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/neomru.vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'Shougo/vimfiler.vim'

" 最近文件
nnoremap <silent> <CR> :Unite -start-insert file_mru<CR>
" 文件查找
nnoremap <silent> <C-p> :<C-u>Unite -start-insert file_rec<CR>
" nnoremap <C-p> :<C-u>Unite -start-insert file_rec/async<CR>
" 打开的buffer查找
nnoremap <silent> <M-b> :Unite buffer<CR>

" 文件内搜索
nnoremap <silent> <leader>g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
if executable('pt.exe')
  let g:unite_source_grep_command = 'pt.exe'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif

" 替换nertw
nnoremap <F2> :VimFilerExplorer<CR>
nnoremap <leader>fd :VimFilerExplorer file:D:/Develop/<cr>
nnoremap <leader>fg :VimFilerExplorer file:G:/<cr>
let g:vimfiler_as_default_explorer = 1

" -----------------------------------------------------------------------------
Plugin 'vim-scripts/a.vim'
" -----------------------------------------------------------------------------
" 用于切换C/C++头文件
" :A     ---切换头文件并独占整个窗口
" :AV    ---切换头文件并垂直分割窗口
" :AS    ---切换头文件并水平分割窗口
nnoremap <silent> <F12> :A<CR>
nnoremap <silent> <M-o> :A<CR>

" -----------------------------------------------------------------------------
" 任意搜索
Plugin 'sgur/unite-everything'
" -----------------------------------------------------------------------------
" 显示数量
let g:unite_source_everything_limit = 20
" 设置为1, 为全路径搜索
let g:unite_source_everything_full_path_search = 0
" 设置为1则使用正则搜索
let g:unite_source_everything_posix_regexp_search = 0
" 设置为1则对结果进行路径排序
let g:unite_source_everything_sort_by_full_path = 0
" 设置为1则大小写敏感
let g:unite_source_everything_case_sensitive_search = 0
" 设置everything路径
let g:unite_source_everything_cmd_path = 'D:/program files/Everything/Everything.exe'
" 设置异步搜索的最小长度
let g:unite_source_everything_async_minimum_length = 3
" }}}

"  文件内跳转{{{

Plugin 'Shougo/unite-outline'
"---------------------------------------------------------------------
nnoremap <m-m> :Unite outline<CR>
nnoremap <F4> :Unite outline<CR>

" ---------------------------------------------------
Plugin 'Lokaltog/vim-easymotion'
" Invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
" ---------------------------------------------------
map <Leader> <Plug>(easymotion-prefix)
map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)ap <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

"}}}

"  内容注释{{{

Plugin 'tpope/vim-surround'
" invoke when you select words and press 's'
" ---------------------------------------------------
xmap s <Plug>VSurround

Plugin 'scrooloose/nerdcommenter'
" Invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
" ---------------------------------------------------
" 我主要用于C/C++代码注释(其它的也行)
" 以下为插件默认快捷键，其中的说明是以C/C++为例的，其它语言类似
" <Leader>ci 以每行一个 /* */ 注释选中行(选中区域所在行)，再输入则取消注释
" <Leader>cm 以一个 /* */ 注释选中行(选中区域所在行)，再输入则称重复注释
" <Leader>cc 以每行一个 /* */ 注释选中行或区域，再输入则称重复注释
" <Leader>cu 取消选中区域(行)的注释，选中区域(行)内至少有一个 /* */
" <Leader>ca 在/*...*/与//这两种注释方式中切换（其它语言可能不一样了）
" <Leader>cA 行尾注释
let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
map <unique> <F11> <Plug>NERDCommenterAlignBoth
map <unique> <C-F11> <Plug>NERDCommenterUncomment

Plugin 'vim-scripts/DoxygenToolkit.vim'
let g:DoxygenToolkit_commentType = "C++"
let g:DoxygenToolkit_briefTag_pre="@Brief  "
let g:DoxygenToolkit_paramTag_pre="@Param  "
let g:DoxygenToolkit_returnTag="@Return "
let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------"
let g:DoxygenToolkit_blockFooter="--------------------------------------------------------------------------"
let g:DoxygenToolkit_authorName="DaSea"
let g:DoxygenToolkit_licenseTag="None"

"}}}

"  代码静态分析{{{

" Plugin 'scrooloose/syntastic'
" Invoke when you save file and have syntac-checker
" ---------------------------------------------------
" this will make html file by Angular.js ignore errors
" let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

" }}}

" 历史编辑 {{{

Plugin 'mbbill/undotree'
" invoke by <Leader>u
" 一个用于编辑历史的插件
" ---------------------------------------------------
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 4
" NOTE: this will prevent undotree closed then jump to minibufexpl
function! g:CloseUndotree()
    call UndotreeHide()
    call ex#window#goto_edit_window()
endfunction

function g:Undotree_CustomMap()
    nnoremap <silent> <script> <buffer> <ESC> :call g:CloseUndotree()<CR>
endfunction

" }}}

" c++友好提升 {{{

" -----------------------------------------------------------------------------
Plugin 'octol/vim-cpp-enhanced-highlight'
" -----------------------------------------------------------------------------
let g:cpp_class_scope_highlight=1
let g:cpp_experimental_template_highlight = 1

"}}}

" python相关 {{{

" -----------------------------------------------------------------------------
" Plugin 'rkulla/pydiction'
" -----------------------------------------------------------------------------
" let g:pydiction_location = $VIM.'/vimfiles/bundle/pydiction/complete-dict'
" let g:pydiction_menu_height = 3

"}}}

" 界面相关{{{
" ----------------------------------------------------
" 状态栏使用airline还是lightline
let g:statusline="lightline"
if g:statusline !=? "airline"
    " ---------------------------------------------------
    Plugin 'itchyny/lightline.vim'
    " ---------------------------------------------------
    let g:lightline = {
                \ 'colorscheme': 'solarized',
                \ 'component':{'readonly': '%{&readonly?"":""}'},
                \ 'active': {
                \   'left': [ [ 'mode'], ['readonly', 'filename', 'modified' ] ]
                \ },
                \ 'component_function': {
                \   'readonly': 'LightLineReadonly',
                \   'modified': 'LightLineModified'
                \ },
                \ 'separator': {'left': '', 'right': ''}, 
                \ 'subseparator': {'left': '', 'right': ''}
                \ }

    function! LightLineModified()
        if &filetype == "help"
            return ""
        elseif &modified
            return "*"
        elseif &modifiable
            return "+"
        else
            return "?"
        endif
    endfunction

    function! LightLineReadonly()
        if &filetype == "help"
            return ""
        elseif &readonly
            return ""
        else
            return ""
        endif
    endfunction
else
    Plugin 'bling/vim-airline'
    " airline 设置
    let g:airline_extensions = ['tabline', 'unite', 'quickfix']
    let g:airline_powerline_fonts = 1
    if !exists('g:ariline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.linenr = ''
    " tabline设置
    let g:airline#extensions#tabline#formatter = 'unique_tail'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline_theme = 'bubblegum'
endif
" ---------------------------------------------------
Plugin 'Yggdroot/indentLine'
" : 对齐插件
" ---------------------------------------------------

let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_char = '|'

" ---------------------------------------------------
Plugin 'altercation/vim-colors-solarized'
" 配色设置
" ---------------------------------------------------

"}}}

""VIM关闭问题{{{
Plugin 'moll/vim-bbye'
if g:isGUI
    noremap <M-q> :Bdelete<CR>
    inoremap <M-q> <ESC>:Bdelete<CR>
    vnoremap <M-q> <ESC>:Bdelete<CR>
endif
noremap <leader>qb :Bdelete<CR>
inoremap <leader>qb <ESC>:Bdelete<CR>
vnoremap <leader>qb <ESC>:Bdelete<CR>
""}}}

"""vim session{{{
Plugin 'Shougo/unite-session'
" :UniteSessionSave <session-name>
" :UniteSessionLoad <session-name>
"""}}}

" vim文档及WIKI{{{

" -----------------------------------------------------------------------------
Plugin 'asins/vimcdoc'
" < VIM中文帮助文档:>
" -----------------------------------------------------------------------------
" 设定doc文档目录
let helptags=$VIM."/vimfiles/doc"
set helplang=cn

"}}}

" 内容完成 {{{
" -----------------------------------------------------------------------------
Plugin 'jiangmiao/auto-pairs'
" -----------------------------------------------------------------------------
" -----------------------------------------------------------------------------
" 用于括号与引号自动补全

" -----------------------------------------------------------------------------
" 自动完成引擎
if has("lua")
    Plugin 'Shougo/neocomplete'
else
    Plugin 'Shougo/neocomplcache'
endif
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : ''
        \ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1
" Shell like behavior(not recommended).
"set completeopt+=longest
" let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<TAB>" : "\<Plug>(neosnippet_expand_or_jump)"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

"}}}

"""模板插件{{{
Plugin 'aperezdc/vim-template'
"""}}}

" TEST {{{
" " test-loading
" echomsg "test-loading: .vimrc"
" Plugin 'exvim/test-loading'
"}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
