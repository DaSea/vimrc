" 设置deoplete.nvim与neocomplete.vim一些共用的插件
function! SetCppPath() abort "{{{
    let files = split(glob('/usr/include/c++/6/*'), '\n')
                \ + split(glob('/usr/include/qt/*'), '\n')
    call filter(files, 'isdirectory(v:val)')

    " Add cpp path.
    let g:neoinclude#paths['cpp'] = '.,' . join(files, ',')
    let g:neoinclude#_paths['cpp'] = '.,' . join(files, ',')
endfunction"}}}

Plug 'Shougo/neoinclude.vim' "{{{
" disable ctags
" let g:neoinclude#ctags_command = ''
" 字典,设置路径
if !exists('g:neoinclude#paths')
    let g:neoinclude#paths = {}
endif
if !exists('g:neoinclude#_paths')
    let g:neoinclude#_paths = {}
endif
if g:iswindows
    let g:neoinclude#paths = {
                \ 'cpp': 'D:/Develop/Java/android-ndk-r10/platforms/android-19/arch-arm/usr/include'
                \ }
else
    call SetCppPath()
endif
" if !exists('g:neoinclude#_exts')
" let g:neoinclude#_exts = {}
" endif
" let g:neoinclude#_exts.cpp = ['', 'h', 'hpp', 'hxx']
" let g:neoinclude#_exts.python = ['py', 'py3'];
"}}}

Plug 'Shougo/neosnippet.vim' "{{{
let g:neosnippet#disable_runtime_snippets = {
            \   '_' : 1,
            \ }
let g:neosnippet#snippets_directory=g:setting.private_snippets
let g:neosnippet#enable_complete_done = 1
let g:neosnippet#enable_conceal_markers = 0
let g:neosnippet#disable_select_mode_mappings=0
let g:neosnippet#enable_completed_snippet=1
" 主要防止自定义snippet与neosnippet的冲突
let g:neosnippet#disable_runtime_snippets = {
            \   '_' : 1,
            \ }
" let g:neosnippet#enable_snipmate_compatibility=1
" Plug key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
" 编辑snippet
nnoremap <leader>ns :execute ":NeoSnippetEdit ".&filetype<CR>
"}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
